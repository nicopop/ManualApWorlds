"""
Generated file, do not edit manually.

See https://github.com/Satisha10/APworld_wotw_extractors for the code.
Generated with `extract_rules.py` by running `parse_rules()`.
"""


from .Rules_Functions import *

from worlds.generic.Rules import add_rule


def set_moki_rules(world, player, options):
    """Moki (or easy, default) rules."""
    add_rule(world.get_entrance("HeaderStates_to_SkipKwolok", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("HeaderStates_to_SkipMora1", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("HeaderStates_to_SkipMora2", player), lambda s: s.has("Impossible", player), "or")
    add_rule(world.get_entrance("Teleporters_to_MidnightBurrows.Teleporter", player), lambda s: s.has("Bash", player) and s.has("Midnight Burrows TP", player) and can_keystones(s, player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_MarshSpawn.Main", player), lambda s: s.has("Inkwater Marsh TP", player), "or")
    add_rule(world.get_entrance("Teleporters_to_HowlsDen.Teleporter", player), lambda s: s.has("Howl's Den TP", player), "or")
    add_rule(world.get_entrance("Teleporters_to_EastHollow.Teleporter", player), lambda s: s.has("Kwolok's Hollow TP", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_GladesTown.Teleporter", player), lambda s: s.has("Glades TP", player), "or")
    add_rule(world.get_entrance("Teleporters_to_InnerWellspring.Teleporter", player), lambda s: s.has("Wellspring TP", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WoodsEntry.Teleporter", player), lambda s: s.has("Regenerate", player) and s.has("Woods Entrance TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WoodsMain.Teleporter", player), lambda s: s.has("Regenerate", player) and s.has("Woods Exit TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_LowerReach.Teleporter", player), lambda s: s.has_all(("Regenerate", "Flap"), player) and s.has("Baur's Reach TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_UpperDepths.Teleporter", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("Mouldwood Depths TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_EastPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has("Central Luma TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has("Luma Boss TP", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.WestTP", player), lambda s: s.has("Regenerate", player) and s.has("Feeding Grounds TP", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("Central Wastes TP", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_UpperWastes.NorthTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("Outer Ruins TP", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("Inner Ruins TP", player) and s.has("EastHollow.ForestsVoice", player) and s.has("LowerReach.ForestsMemory", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("WestPools.ForestsStrength", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("Willow's End TP", player) and has_health(60, s, player), "or")
    add_rule(world.get_entrance("Teleporters_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("Shriek TP", player) and has_health(60, s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_F.MarshSpawn.Main", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.FirstPickupEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.OpherBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_C.MarshSpawn.OpherBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.ToOpherBarrier", player), lambda s: cost_all(s, player, options, "MarshSpawn.OpherBarrier", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.LogBroken", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshPastOpher.MillView", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("MarshSpawn.LogBroken", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.OpherBarrier", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_C.MarshSpawn.BrokenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceShard", player), lambda s: cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.PreLupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.CaveEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.LogBroken", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_C.MarshSpawn.CaveEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.TokkBarrier", player), lambda s: cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.RegenDoor", player), lambda s: s.has("MarshSpawn.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.Cave", player), lambda s: s.has("MarshSpawn.TokkBarrier", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_C.MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_H.MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveFight", player), lambda s: cost_all(s, player, options, "MarshSpawn.Cave", [], [], [[24, 'Combat'], [24, 'Combat'], [24, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("MarshSpawn.CaveFight", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.TokkKeystoneQuest", player), lambda s: s.has("MarshSpawn.CaveKS", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.LeftTokkEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.Cave", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.FightRoomEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.Cave", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveEntrance", player), lambda s: s.has("MarshSpawn.TokkBarrier", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Grapple"), player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_H.MarshSpawn.BurrowFightArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowArena", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Sand", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [40], [], [[40, 'Combat'], [32, 'Combat'], [20, 'Combat'], [20, 'Combat'], [24, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.LifepactShard", player), lambda s: s.has("MarshSpawn.BurrowArena", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_C.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.Cave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_C.MarshSpawn.BeforeBurrows", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.CrusherSwimEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_C.MarshSpawn.BurrowsEntry", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.DamageTreeOpen", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.TokkTabletQuest", player), lambda s: s.has("MidnightBurrows.TabletQI", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.DamageTree", player), lambda s: s.has("MarshSpawn.DamageTreeOpen", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MidnightBurrows.Teleporter", player), lambda s: s.has("MarshSpawn.BurrowsOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_C.MarshSpawn.LeftSpawnSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.RockHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.LongSwimEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.Main", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow", "Dash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_C.MarshSpawn.PoolsPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.WheelFreed", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has_any(("Water Breath", "Water Dash"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and s.has_any(("Water Breath", "Water Dash"), player) and has_health(25, s, player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.RegenTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.CaveEntrance", player), lambda s: s.has("MarshSpawn.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.RegenDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_C.MarshSpawn.HowlApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.HowlBurnt", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RecklessShard", player), lambda s: cost_all(s, player, options, "MarshSpawn.HowlApproach", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.HowlApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlBurnt", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.MokkFangQuest", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("MarshSpawn.FangQI", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Grenade', 1]], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_C.MarshSpawn.AboveHowlArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_H.MarshSpawn.AboveHowlArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.MokkTheBrave", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_H.MarshSpawn.FangPlatform", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangQI", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_C.HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_H.HowlsDen.UpperLoopExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.UpperLoopExitBarrier", player), lambda s: cost_all(s, player, options, "HowlsDen.UpperLoopExit", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.RightHC", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopExit", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.RightHC", player), lambda s: cost_all(s, player, options, "HowlsDen.UpperLoopExit", [], [], [[20, 'Wall']], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_C.HowlsDen.AboveBoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_C.HowlsDen.UpperLoopEntrance", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopEntranceBarrier", player), lambda s: cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[20, 'Wall']], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.BoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_C.HowlsDen.BoneBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.RainLifted", player), lambda s: s.has("HowlsDen.SwordTree", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneBarrier", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.SwordTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneOre", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Spear', 1]], [[32, 'Combat'], [13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.MagnetShard", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.MagnetShard", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveTPEX", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has("HowlsDen.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("HowlsDen.BoneBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_C.HowlsDen.BoneBridgeDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.SecretRoomWall", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [[13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Grenade', 1]], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_H.HowlsDen.MidwayBottomLoop", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.OutsideSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_C.HowlsDen.SecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has("HowlsDen.SecretRoomWall", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [[32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.AboveTPEX", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveTeleporter", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player) and cost_all(s, player, options, "HowlsDen.AboveTeleporter", [], [], [], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_F.HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_DenShrine", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_DenShrine", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_all(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_C.HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeCombat", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", [], [], [[32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [8, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("HowlsDen.DoubleJumpTreeCombat", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("HowlsDen.DoubleJumpTreeCombat", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_C.HowlsDen.DoubleJumpTreeLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpTreeArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Double Jump", "Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.StickyShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_MidnightBurrows.DenConnection", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("DenShrine_to_F.DenShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("DenShrine_to_HowlsDen.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "DenShrine", [60], [], [[32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [4, 'Refill'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [24, 'Combat'], [24, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("DenShrine_to_HowlsDen.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Bash", "Launch"), player) and cost_all(s, player, options, "DenShrine", [40], [], [[32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [4, 'Refill'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [24, 'Combat'], [24, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("DenShrine_to_HowlsDen.CombatShrine", player), lambda s: s.has("HowlsDen.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_C.MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_E.MarshPastOpher.MillView", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_C.MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.TrunkWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialStart", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player) and s.has("MarshPastOpher.TrialActivation", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("MarshPastOpher.TrunkWall", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_C.MarshPastOpher.UnderTrunk", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialLeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialStart", player), lambda s: s.has("MarshPastOpher.TrunkWall", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_C.MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_H.MarshPastOpher.TrialArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialActivation", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialHC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialHC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[20, 'Wall'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshShrine_to_F.MarshShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshShrine_to_MarshPastOpher.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshShrine", [20], [], [[20, 'Combat'], [20, 'Combat'], [2, 'Refill'], [32, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [2, 'Refill'], [32, 'Combat'], [20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshShrine_to_MarshPastOpher.CombatShrine", player), lambda s: s.has("MarshPastOpher.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_C.MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_H.MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_E.MarshPastOpher.BowPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.TrialStart", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_C.MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_H.MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.SwingPoleEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowApproach", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 4]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 4]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_E.MarshPastOpher.BowArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.EyestoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowEC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 2]], [[20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_WestHollow.Entrance", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 1]], [[20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_C.MarshPastOpher.UpperBowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_E.MarshPastOpher.UpperBowArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.LeftEyestone", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", [], [['Bow', 1]], [[20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.RightEyestone", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshPastOpher.UpperBowArea", [], [['Bow', 1]], [[20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_C.MarshPastOpher.PoolsPathEast", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_H.MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_E.MarshPastOpher.PoolsPathEast", player), lambda s: s.has("BreakCrystal", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.OpherSkipBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_C.MarshPastOpher.PoolsPathMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Clean Water"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Launch", "Clean Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_C.MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_C.MarshPastOpher.PoolsPathWest", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_F.MidnightBurrows.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Teleporter", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous', 'Combat.Bat', 'Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Launch", player) and s.has("MarshSpawn.BurrowsOpen", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("MarshSpawn.BurrowsOpen", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.LeftKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowLupo", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous', 'Combat.Bat', 'Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_C.MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Launch", "Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_C.MidnightBurrows.TabletRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_H.MidnightBurrows.TabletRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_MidnightBurrows.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_MidnightBurrows.TabletQI", player), lambda s: s.has("MidnightBurrows.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.TabletRoom_to_MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_C.MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Launch", player) and s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_C.MidnightBurrows.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.Lever", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_C.MidnightBurrows.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: cost_all(s, player, options, "MidnightBurrows.East", [], [], [], [[0, [[32, 'Combat'], [40, 'Combat']], ['Combat.Dangerous', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_C.MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.HowlsDenShortcut", player), lambda s: cost_all(s, player, options, "MidnightBurrows.DenConnection", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.RightKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.DenConnection", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_HowlsDen.DoubleJumpTreeArea", player), lambda s: s.has("MidnightBurrows.HowlsDenShortcut", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_C.MidnightBurrows.PortalCorridor", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [15], [], [], [], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [15], [], [], [], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.UpperKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.UpperKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [], [], [], [[0, [[32, 'Combat']], ['Combat.Bat', 'Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_C.WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_E.WestHollow.Entrance", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.EyestoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1], ['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.CrusherHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_TwillenShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("Bash", player) and s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [[13, 'Combat'], [13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_H.WestHollow.MokiByTwillen", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [['Bow', 1]], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [[13, 'Combat'], [13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_EastHollow.Teleporter", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.InFrontPurpleDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_C.WestHollow.HollowDrainMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_E.WestHollow.HollowDrainMiddle", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.UpperTongueExtended", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_C.WestHollow.RockPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_H.WestHollow.RockPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 4]], [[20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 4]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleEX", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [[20, 'Combat'], [13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_E.WestHollow.FarLeftRoom", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Launch", player) and s.has("WestHollow.UpperDrainLeverPulled", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_E.WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.UpperTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.UpperTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("WestHollow.LowerTongueExtended", "Launch", "Glide", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.HiddenEC", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_C.WestHollow.HollowDrainLower", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [[0, [[20, 'Combat'], [20, 'Combat']], ['Combat.Aerial']]], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has_all(("Double Jump", "Launch"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.SwimEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [[13, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [[13, 'Combat'], [20, 'Combat'], [20, 'Combat'], [40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("WestHollow.FullyDrained", player) and s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [[13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [[13, 'Combat']], [[0, [[40, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Launch", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[0, [[13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_C.WestHollow.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [[13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_C.WestHollow.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.TrialHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_C.WestHollow.PolesPound", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.DashApproach", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [[13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_C.WestHollow.DashApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_E.WestHollow.DashApproach", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.TrialActivation", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [], [[20, 'Combat'], [32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DashArea", player), lambda s: s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_C.WestHollow.DashArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashApproach", player), lambda s: s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_C.WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.CrusherEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashTree", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_C.WestHollow.DashRoomTopRight", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Bash", "Glide", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[0, [[40, 'Combat'], [20, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded', 'Combat.Aerial']]], 0), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.AboveDashEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_F.EastHollow.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_BeetleFight", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [], [[20, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("WestHollow.PurpleDoorOpen", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("BeetleFight_to_F.BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("BeetleFight_to_EastHollow.BeetleDefeated", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and cost_all(s, player, options, "BeetleFight", [45], [], [[250, 'Boss']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.MapMoki", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.Teleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Glide", player) and s.has("EastHollow.BeetleDefeated", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_C.EastHollow.MapMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.HandToHandMap", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("EastHollow.VoiceDoorOpen", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.GromsWall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.GromsWall", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_EastHollow.MapMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_C.EastHollow.AfterBeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorOpen", player), lambda s: s.has("EastHollow.ForestsVoice", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.AboveBash", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Glide", player) and s.has("EastHollow.BeetleDefeated", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Launch", player) and s.has("EastHollow.BeetleDefeated", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("Bash", player) and s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_C.EastHollow.BashTreeCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_C.EastHollow.Kwolok", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.ForestsVoice", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokAmuletQuest", player), lambda s: s.has("EastPools.KwolokAmuletQI", player) and s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_GladesTown.TuleySpawned", player), lambda s: s.has("InnerWellspring.WaterEscape", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[2, 10]], 0), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimRightEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_health(40, s, player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Dash", "Glide"), player) and has_health(40, s, player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch"), player) and has_health(40, s, player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_C.EastHollow.AboveDepths", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_E.EastHollow.AboveDepths", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsOpen", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashHC", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.SplinterShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_UpperDepths.Entry", player), lambda s: s.has("Regenerate", player) and s.has("EastHollow.DepthsOpen", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_F.GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BuildHuts", player), lambda s: s.count("Ore", player) >= 15, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.RoofsOverHeads", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.count("Ore", player) >= 21, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.OnwardsAndUpwards", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.count("Ore", player) >= 29, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ClearThorns", player), lambda s: s.count("Ore", player) >= 23, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.CaveEntrance", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.count("Ore", player) >= 29, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.RebuildTheGlades", player), lambda s: s.count("Ore", player) >= 40, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Launch", player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Clean Water", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Launch", "TuleyShop.SpringPlants"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: s.has_any(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Double Jump", "Launch", "TuleyShop.SpringPlants"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Bash", player) and s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_EastHollow.OutsideGlades", player), lambda s: s.has("GladesTown.GromsWall", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_C.GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.HandToHandLantern", player), lambda s: s.has("LowerReach.HandToHandHat", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.FamilyReunionKey", player), lambda s: s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Grenade', 1]], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.AboveCaveEX", player), lambda s: s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.KeyMokiHutEX", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has("WoodsEntry.DollQI", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.DamageTree", player), lambda s: s.has("TuleyShop.LastTree", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_TwillenShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.AcornMoki", player), lambda s: s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has_any(("GladesTown.ClearThorns", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_C.GladesTown.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.HandToHandCanteen", player), lambda s: s.has("EastPools.HandToHandSpyglass", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Launch", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Grapple", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Launch", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.MotayHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("Launch", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.ArcingShard", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.ArcingShard", player), lambda s: s.has("Grapple", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("TuleyShop.StickyGrass", "TuleyShop.BlueMoon"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("Grapple", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.TwillenHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_E.GladesTown.AcornMoki", player), lambda s: s.has("GladesTown.CaveEntrance", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water", "Glide"), player) and s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water", "Double Jump", "Dash"), player) and s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Bash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Launch"), player) and s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.MokiAcornQuest", player), lambda s: s.has("GladesTown.AcornQI", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.CaveBurrowEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.AboveTpEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.BelowBountyShard", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.LeftAboveCoals", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Double Jump", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Glide", player) and s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has("GladesTown.TuleySpawned", player) and s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has_any(("TuleyShop.SpringPlants", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.PlayfulMoki", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.AboveOpher", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.LupoSoupEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_LupoShop.HCMapIcon", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_LupoShop.ECMapIcon", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_LupoShop.ShardMapIcon", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.LupoSwimHC", player), lambda s: s.has_all(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.BelowHoleHutEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("Bash", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has_any(("TuleyShop.SpringPlants", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch", "Grapple"), player) and s.has_any(("TuleyShop.BlueMoon", "TuleyShop.StickyGrass"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("TuleyShop.SpringPlants", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Double Jump", "Dash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Dash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.BlueMoon", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.PlayfulMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_GladesTown.HoleHutEX", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_GladesTown.HoleHutEC", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_GladesTown.HoleHut", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_C.WestGlades.PastTown", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [[40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.SwimEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [[40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_C.WestGlades.Center", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Clean Water", "Launch", "Double Jump", "Dash", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_C.WestGlades.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_H.WestGlades.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_LowerReach.BearSneezed", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.UpperPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.Center", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_LowerReach.Entry", player), lambda s: s.has("Regenerate", player) and s.has("LowerReach.BearSneezed", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_C.WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_H.WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has("Clean Water", player) and s.has_any(("Grapple", "Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Launch", "Clean Water"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Dash", "Glide"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_health(25, s, player) and cost_all(s, player, options, "WestGlades.MillApproach", [15], [], [], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple"), player) and s.has_any(("Water Dash", "Launch"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch", "Double Jump", "Dash"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch", "Glide"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_C.WestGlades.ShrineArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_GladesShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.MillApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesShrine_to_F.GladesShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesShrine_to_WestGlades.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Shielded", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "GladesShrine", [65], [], [[32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [3, 'Refill'], [40, 'Combat'], [40, 'Combat'], [40, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("GladesShrine_to_WestGlades.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Shielded", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "GladesShrine", [55], [], [[32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [3, 'Refill'], [40, 'Combat'], [40, 'Combat'], [40, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("GladesShrine_to_WestGlades.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Shielded", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "GladesShrine", [30], [], [[32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [3, 'Refill'], [40, 'Combat'], [40, 'Combat'], [40, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("GladesShrine_to_WestGlades.CombatShrine", player), lambda s: s.has("WestGlades.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_C.OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [[0, [[13, 'Combat'], [32, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WheelEX", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.BasementEC", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.SwimEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("Double Jump", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("Double Jump", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[0, [[13, 'Combat'], [32, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("Launch", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_InnerWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_health(20, s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and has_health(20, s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_health(20, s, player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Clean Water", "Launch"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [], [[0, [[32, 'Combat'], [13, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoorOpen", player), lambda s: cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("OuterWellspring.EntranceDoorOpen", "Double Jump", "Dash", "Glide", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_E.OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Double Jump", "Launch"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_C.OuterWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_C.OuterWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Grenade', 0]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TheLostCompass", player), lambda s: s.has("InnerWellspring.NeedleQI", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_E.OuterWellspring.AboveWestDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_InnerWellspring.Teleporter", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.RightWallOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Grapple", "Glide"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Clean Water", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_C.OuterWellspring.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_C.OuterWellspring.TrialRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_H.OuterWellspring.TrialRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_E.OuterWellspring.TrialRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_C.OuterWellspring.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player) and s.has("OuterWellspring.TrialActivation", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_C.InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_E.InnerWellspring.EntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheels", player), lambda s: cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("InnerWellspring.ThreeWheels", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.WaterSwitchEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_OuterWellspring.EntranceDoor", player), lambda s: has_health(25, s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.ThreeWheels", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_C.InnerWellspring.ThornShardArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ShortCutWheel", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("Grapple", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("InnerWellspring.ShortCutWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Launch", player) and s.has("InnerWellspring.ShortCutWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_C.InnerWellspring.DrainRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_E.InnerWellspring.DrainRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomBottomWheel", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [['Grenade', 1]], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_C.InnerWellspring.DrainAreaExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainAreaEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has_any(("Clean Water", "InnerWellspring.DrainRoomBottomWheel"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTopWheel", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [[16, 'Wall']], [[1, 'Bow', 0], [1, 'Grenade', 0], [1, 'Spear', 0]], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTopWheel", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("InnerWellspring.DrainRoomTopWheel", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_C.InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_H.InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.DrainRoomCenter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.DrainRoomTopWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_C.InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_any(("InnerWellspring.UpperCorruption", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomCenter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.UpperCorruption", player), lambda s: cost_all(s, player, options, "InnerWellspring.AbovePole", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.LupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_C.InnerWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_H.InnerWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_E.InnerWellspring.WestDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.ShortcutWheelEX", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTree", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.MiddleDoorsOpen", player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_C.InnerWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_H.InnerWellspring.EastDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_E.InnerWellspring.EastDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinArena", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[24, 'Combat'], [24, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinningRoomOpen", player), lambda s: s.has("InnerWellspring.SpinArena", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.HandToHandHerbs", player), lambda s: s.has("GladesTown.HandToHandPouch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_OuterWellspring.EastDoor", player), lambda s: has_health(25, s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Double Jump", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_C.InnerWellspring.SpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.RotateRoomEX", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.RotateRoomOre", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.SpinningRoomOpen", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_C.InnerWellspring.PastSpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [[40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_C.InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [[13, 'Combat'], [13, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.TopDoorOpen", player), lambda s: cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.NeedleQI", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Grapple", "Launch"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Grapple", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_F.InnerWellspring.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.LibraryEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.SwimOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OuterWellspring.TopDoor", player), lambda s: has_health(25, s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_OpherShop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_F.InnerWellspring.EscapeSequence", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.EscapeRevisitEX", player), lambda s: s.has("InnerWellspring.WaterEscape", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_C.WoodsEntry.ShriekMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [], [[1, 'Combat']], [[0, [[40, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_C.WoodsEntry.FirstMud", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.MudPitEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.MudPitEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [[1, 'Combat']], [[0, [[40, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_C.WoodsEntry.BelowTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_F.WoodsEntry.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LastTreeBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.DollQI", player), lambda s: s.has("GladesTown.FamilyReunionKey", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.TreeSeed", player), lambda s: s.has("TuleyShop.LastTreeBranchRejected", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.TpEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.FirstMud", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.BelowTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_C.WoodsEntry.TwoKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_E.WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("WoodsEntry.KeystoneDoor", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.LowerKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.UpperKS", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and s.has_any(("Bash", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and has_health(40, s, player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [], [], [], [[0, [[20, 'Combat'], [20, 'Combat'], [40, 'Combat']], ['Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_C.WoodsMain.AfterKuMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.KeystoneDoor", player), lambda s: can_keystones(s, player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.KeystoneDoor", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [], [[0, [[20, 'Combat'], [20, 'Combat'], [40, 'Combat']], ['Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and s.has_any(("Bash", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and has_health(40, s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [], [[0, [[20, 'Combat'], [20, 'Combat'], [40, 'Combat']], ['Combat.Aerial', 'Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.LowerLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Grenade', 3]], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Grenade', 1]], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [10], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [10], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BehindWallOre", player), lambda s: cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_C.WoodsMain.FourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[20, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.MiddleLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Grenade', 1]], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.GiantSkull", player), lambda s: s.has("WoodsMain.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_C.WoodsMain.GiantSkull", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.UpperLeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("WoodsMain.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_C.WoodsMain.BalloonLure", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Glide", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [], [[3, 'Wall']], [[1, 'Grenade', 0], [1, 'Blaze', 0]], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.YellowWallEX", player), lambda s: s.has("WoodsMain.BalloonLureYellowBarrierBroken", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [], [], [[0, [[40, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_C.WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_H.WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.PetrifiedHowlEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [], [[3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_C.WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Grapple", "Burrow"), player) and s.has("WoodsMain.TrialActivation", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_C.WoodsMain.MidwayTrial", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_C.WoodsMain.TrialEnd", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.HiddenEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.PetrifiedHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BrokenOwl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Grenade', 1]], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_C.WoodsMain.BeforeLog", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.LogBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [[1, 'Combat'], [3, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [[1, 'Combat'], [1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.AboveHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_F.WoodsMain.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has_any(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_C.WoodsMain.FeedingGrounds", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "Glide"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health(50, s, player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "Glide"), player) and s.has("WindtornRuins.Seir", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WindtornRuins.Seir", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsShrine_to_F.WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsShrine", [80], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [80, 'Combat'], [80, 'Combat'], [32, 'Combat'], [4, 'Refill'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsShrine", [65], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [80, 'Combat'], [80, 'Combat'], [32, 'Combat'], [4, 'Refill'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsShrine", [50], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [80, 'Combat'], [80, 'Combat'], [32, 'Combat'], [4, 'Refill'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.ShrineEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.CombatShrine", player), lambda s: s.has("WoodsMain.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_C.LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_H.LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BearSneezed", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.ThawBaurFurnace", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.ThawBaurFurnace", player), lambda s: s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.FreezeBaurFurnace", player), lambda s: s.has("Flap", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Flap"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Launch", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Entry", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_WestGlades.Upper", player), lambda s: s.has("LowerReach.BearSneezed", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_C.LowerReach.AboveEntry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Launch", player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_C.LowerReach.Icefall", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_E.LowerReach.Icefall", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.BearBridgeBroken", player), lambda s: s.has("LowerReach.BearSneezed", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [[25, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Clean Water", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Launch", "Clean Water", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_C.LowerReach.CentralEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.SecondSoup", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Launch", player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_C.LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_F.LowerReach.OutsideTPRoom", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_H.LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_E.LowerReach.OutsideTPRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.AboveDoorEX", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.AboveDoorEX", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.SecondSoup", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.Teleporter", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_C.LowerReach.BelowTokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_LowerReach.OutsideTPRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Bash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Bash"), player) and has_health(40, s, player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump", "Dash", "Bash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump", "Bash"), player) and has_health(40, s, player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_F.LowerReach.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.OutsideTPRoom", player), lambda s: cost_all(s, player, options, "LowerReach.Teleporter", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash", "Double Jump", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [[60, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.MeltIceEX", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BurrowEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Bash", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.ThawCentralFurnace", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.FreezeCentralFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_C.LowerReach.CentralFurnacePedestal", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [], [[60, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [['Bow', 1]], [[60, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.ThawCentralFurnace", player), lambda s: cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.FreezeCentralFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_C.LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindLantern", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.BreakWallEX", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("Glide", player) and s.has("LowerReach.WindLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Glide", player) and s.has("LowerReach.WindLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Glide", player) and s.has("LowerReach.WindLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_E.LowerReach.SoupMoki", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.HandToHandHat", player), lambda s: s.has("LowerReach.HandToHandSoup", player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_F.LowerReach.EastEnemyPaths", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_LowerReach.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.Teleporter", player), lambda s: s.has("LowerReach.TPLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.East", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SoupMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_C.LowerReach.SnowballEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.Snowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [[0, [[32, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SnowballHC", player), lambda s: s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SnowballHC", player), lambda s: s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [], [], [[2, 20]], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Snowball", [], [], [[12, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SoupMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("Double Jump", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("Bash", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_C.LowerReach.PastSnowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_E.LowerReach.PastSnowball", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [], [], [[0, [[24, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Launch", player) and s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.RoofRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.PastSnowball", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_E.LowerReach.SwimmingPool", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.FractureShard", player), lambda s: s.has("Clean Water", player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_C.LowerReach.EastFurnace", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.ThawEastFurnace", player), lambda s: cost_all(s, player, options, "LowerReach.EastFurnace", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.FreezeEastFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.PastSnowball", player), lambda s: cost_all(s, player, options, "LowerReach.EastFurnace", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.EastFurnace_to_LowerReach.SwimmingPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_C.LowerReach.ArenaArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_H.LowerReach.ArenaArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_E.LowerReach.ArenaArea", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_E.LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.ArenaBeaten", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.ArenaArea", [40], [], [[60, 'Combat'], [60, 'Combat'], [60, 'Combat'], [40, 'Combat'], [24, 'Combat'], [24, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.TrialStart", player), lambda s: s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("LowerReach.FreezeEastFurnace", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.ArenaArea", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_C.LowerReach.WispPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [], [], [[1, 'Grenade', 3]], 0), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_C.LowerReach.BridgeWispPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [], [[12, 'Combat'], [40, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_F.LowerReach.SnowEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has_any(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Bash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.EscapeRevisitEX", player), lambda s: s.has("LowerReach.ForestsMemory", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_C.LowerReach.VeralHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.HandToHandSoup", player), lambda s: s.has("InnerWellspring.HandToHandHerbs", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.LeafPileEX", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has_all(("Clean Water", "Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "LowerReach.VeralHome", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.HoleHut", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.PlayfulMoki", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.VeralHome", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.VeralHome", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_C.LowerReach.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialActivation", player), lambda s: s.has("LowerReach.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.SpiritTrial", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[2, 20]], 0), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.UpperLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.MiddleLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_C.UpperReach.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.FreezeFurnace", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_Tokk", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [[60, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.FreezeFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("Bash", player) and s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Clean Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Clean Water", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Regenerate", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.KeystoneSnapPlantThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.MiddleLeftKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupFrozenPaths", player), lambda s: s.has("UpperReach.FreezeFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoup_to_UpperReach.UpperSoupThawedPaths", player), lambda s: s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozen_to_UpperReach.UpperSoupFrozenPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawed_to_UpperReach.UpperSoupThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_C.UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_H.UpperReach.UpperSoupPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SoupOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.UpperKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.UpperKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_C.UpperReach.UpperSoupFrozenPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_C.UpperReach.UpperSoupThawedPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.OutsideTreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_C.UpperReach.OutsideTreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has("Launch", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.SwimEX", player), lambda s: s.has("Clean Water", player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("UpperReach.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_E.UpperReach.TreeRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.SpringSeed", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.LightBurstTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.WellEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.HiddenEX", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 3]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.EntrySpikesEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [], [[1, 'Combat'], [1, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Glide", player) and s.has("EastHollow.DepthsOpen", player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_C.UpperDepths.FirstFirefly", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Wall'], [12, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Bow', 1]], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Spear', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Spear', 1]], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Combat'], [1, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Bash", "Launch"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Flash', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Flash', 1]], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has("UpperDepths.ForestsEyes", player) and s.has_any(("Double Jump", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[0, [[12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[0, [[12, 'Combat'], [12, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_C.UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[16, 'Wall'], [16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[16, 'Wall'], [16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("UpperDepths.LightPuzzle", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_C.UpperDepths.RightKeystonePath", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_C.UpperDepths.BelowHive", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_E.UpperDepths.BelowHive", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.HiveEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_F.UpperDepths.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.TeleporterEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0]], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_C.UpperDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.CentralKeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: cost_all(s, player, options, "UpperDepths.Central", [], [], [[12, 'Combat'], [12, 'Combat'], [1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("UpperDepths.CentralKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_C.UpperDepths.SecondKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_E.UpperDepths.SecondKSRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.RightHealthKS", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.RightHealthKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[12, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[12, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_C.UpperDepths.MoraPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_E.UpperDepths.MoraPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 1]], [[12, 'Combat'], [12, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_C.UpperDepths.OutsideMoraFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_MoraFirstPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Double Jump", "Launch"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [['Grenade', 1]], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MoraFirstPhase_to_F.MoraFirstPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has("SkipMora1", player), "or")
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraFirstPhase", [50], [], [[165, 'Boss']], [], 0), "or")
    add_rule(world.get_entrance("MoraEscape_to_C.MoraEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_C.MoraSecondPhase", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_E.MoraSecondPhase", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_UpperDepths.ForestsEyes", player), lambda s: s.has("SkipMora2", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "Bash", "Flash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraSecondPhase", [60], [], [[165, 'Boss']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_C.UpperDepths.LowerConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.CentralKeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.BelowDoorOre", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.Central", player), lambda s: s.has("UpperDepths.CentralKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has_any(("Double Jump", "Glide"), player) and has_health(40, s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Bash"), player) and has_health(40, s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Glide"), player) and has_health(40, s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Bash", "Glide"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and has_health(40, s, player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_C.LowerDepths.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.HandToHandSilk", player), lambda s: s.has("GladesTown.HandToHandLantern", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("DepthsShrine_to_F.DepthsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("DepthsShrine_to_LowerDepths.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", [65], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("DepthsShrine_to_LowerDepths.CombatShrineCompleted", player), lambda s: s.has("Regenerate", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "DepthsShrine", [60], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("DepthsShrine_to_LowerDepths.CombatShrineCompleted", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", [50], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("DepthsShrine_to_LowerDepths.CombatShrine", player), lambda s: s.has("LowerDepths.CombatShrineCompleted", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_C.LowerDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "DepthsLight"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("DepthsLight", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_C.LowerDepths.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Launch", "Glide"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Glide", player) and can_buy_map(s, player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and has_health(40, s, player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and has_health(40, s, player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_C.LowerDepths.BeforeTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_C.LowerDepths.TreeArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_E.LowerDepths.TreeArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.FlashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.RightEX", player), lambda s: s.has_any(("DepthsLight", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_C.PoolsApproach.MillPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash", "Dash", "Glide"), player) and has_health(20, s, player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player) and has_health(20, s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [20], [], [[32, 'Combat'], [8, 'Combat'], [8, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_C.PoolsApproach.MillPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [['Grenade', 3]], [[32, 'Combat'], [8, 'Combat'], [8, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [['Grenade', 2]], [[32, 'Combat'], [8, 'Combat'], [8, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [], [[32, 'Combat'], [8, 'Combat'], [8, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("PoolsApproach.WheelFreed", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("Launch", "Grapple", "PoolsApproach.WheelFreed"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.WheelFreed", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Water Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Glide", "Clean Water"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player) and has_health(40, s, player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Launch"), player) and has_health(40, s, player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [], [], 0), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_C.EastPools.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_H.EastPools.LeverRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowEntryLeverBubble", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowEntryLeverBubble", player), lambda s: cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.WheelFreed", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.KwolokAmuletQI", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.TwoCrushersEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BubbleCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("EastPools.BelowEntryLeverBubble", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BehindEntryDoor", player), lambda s: s.has("EastPools.EntryLever", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and has_health(25, s, player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and has_health(25, s, player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide", "Double Jump"), player) and has_health(25, s, player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Launch"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Launch"), player) and has_health(25, s, player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player) and has_health(25, s, player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_C.EastPools.BehindEntryDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.BelowEntryLeverBubble", player), lambda s: s.has("EastPools.EntryLever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.BelowEntryLeverBubble", player), lambda s: s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[1, 'Spear', 1]], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "Clean Water", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and s.has_any(("Bash", "Launch", "EastPools.BelowEntryLeverBubble"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_C.EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("EastPools.TokkBubblePurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[0, [[1, 'Combat'], [32, 'Combat']], ['Combat.Ranged', 'Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_C.EastPools.TPArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_F.EastPools.TPArea", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.ArenaWall", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_F.EastPools.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.LowerWaterDrained", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.ArenaWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_Teleporters", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.TPArea", player), lambda s: s.has_any(("EastPools.LowerWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.HandToHandSpyglass", player), lambda s: s.has("LowerDepths.HandToHandSilk", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Glide"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']]], 0), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.TPArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.AboveTpEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.FishingPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("UpperPools.UpperWaterDrained", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and has_health(40, s, player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_C.EastPools.NextToLupoOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.LupoOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_C.EastPools.LupoArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("EastPools.LupoPurpleFloor", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.NextToLupoOre", player), lambda s: cost_all(s, player, options, "EastPools.LupoArea", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LupoPurpleFloor", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_C.EastPools.WaterdashArena", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightArenas", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Breath", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [20], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("EastPools.FightArenas", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.ArenaWall", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_C.EastPools.MissilePuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash", "Glide", "Grapple", "Water Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.CentralRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LupoPurpleFloor", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_C.EastPools.CentralRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Dash", "Glide"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Breath", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.CentralRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_C.UpperPools.KeystoneRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has_any(("Bash", "Launch"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and has_health(40, s, player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_any(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_C.UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Flap", "Double Jump"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Double Jump", "Dash", "Grapple"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_C.UpperPools.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_E.UpperPools.KeystoneRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 3]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_C.UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_H.UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TrialActivation", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("UpperPools.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_C.UpperPools.TreeRoomEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.KeystoneDoor", player), lambda s: can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("UpperPools.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoom", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Double Jump"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Launch", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.ButtonDoorAboveTree", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.SwimDashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.SwimDashCurrentEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.AboveTree", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_C.UpperPools.DrainPuzzleEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.TreeRoom", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple", "UpperPools.DrainRoomPurpleWall"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_E.UpperPools.DrainPuzzleRight", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_H.UpperPools.DrainPuzzleRight", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Clean Water", "Glide", "Double Jump", "Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "UpperPools.DrainRoomPurpleWall"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_C.UpperPools.DrainPuzzleExit", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Dash"), player) and s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.AboveFishingPool", player), lambda s: s.has("Regenerate", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_C.UpperPools.RightBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [[24, 'Combat'], [20, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [], [[2, 10]], 0), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubblesEC", player), lambda s: s.has("UpperPools.BubbleSpamLever", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.LeftBubbleSpamRoom", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_C.UpperPools.LeftBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.LeftBubblesEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Breath"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Breath"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_F.WestPools.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowEX", player), lambda s: s.has_all(("Clean Water", "Burrow"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Breath", "Water Dash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has("WestPools.ForestsStrength", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_C.WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_C.WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.EscapeRevisitEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [], [], [], [[0, [[32, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Breath", "Water Dash"), player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Regenerate", player) and s.has("WestPools.ForestsStrength", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_F.KwolokEscape", player), lambda s: True, "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokFight_to_C.KwolokFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("KwolokFight_to_E.KwolokFight", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("KwolokFight_to_WestPools.ForestsStrength", player), lambda s: s.has("SkipKwolok", player), "or")
    add_rule(world.get_entrance("KwolokFight_to_WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash", "Double Jump"), player) and s.has_any(("Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", [85], [], [[250, 'Boss']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_F.LowerWastes.WestTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.WestTPOre", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGroundsEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health(40, s, player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump", "Glide", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health(60, s, player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and has_health(60, s, player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player) and has_health(60, s, player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_C.LowerWastes.SunsetView", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.SunsetViewEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.PurpleWallEX", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.SpiritTrial", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash", "Grapple"), player) and s.has("LowerWastes.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_E.LowerWastes.Shovel", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_E.LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerWastes.Shovel", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.EerieGemQI", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SandBridgeOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("Bash", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: cost_all(s, player, options, "LowerWastes.Shovel", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_C.LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_E.LowerWastes.MuncherTunnel", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.MuncherTunnelEC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [], [[32, 'Combat'], [24, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Burrow", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [], [[32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [], [], [[1, 'Grenade', 1]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_C.LowerWastes.SandPot", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has_all(("Burrow", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[0, [[32, 'Combat']], []]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_C.LowerWastes.WoodenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[20, 'Wall']], [[0, [[60, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths_to_LowerWastes.MinesEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_C.LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_E.LowerWastes.LeverArea", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.WoodenBridge", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.BeforeMinesEntrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.EastTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Double Jump", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Dash", "Glide", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Dash", "Burrow"), player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_C.LowerWastes.MuncherClimb", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LeverArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "LowerWastes.SandPlatformLever"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_C.LowerWastes.SkeetoHive", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.SkeetoHiveEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.Shovel", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_C.LowerWastes.ThirstyGorlek", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.TrialActivation", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.HandToHandMapstone", player), lambda s: s.has("GladesTown.HandToHandCanteen", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.BurrowTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.BurrowTreeEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_C.LowerWastes.UpperPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_E.LowerWastes.UpperPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathEC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.EastTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_F.LowerWastes.EastTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has_any(("Burrow", "Launch"), player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [['Grenade', 1]], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [['Grenade', 3]], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPathHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has_any(("Double Jump", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.LeverArea", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_C.UpperWastes.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Burrow", "Bash"), player) and can_keystones(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [[24, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Launch", player) and can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.UpperKS", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("UpperWastes.KeystoneDoor", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [[24, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("UpperWastes.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_C.UpperWastes.MissilePuzzleLeft", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.MissileSpawnEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.KeystoneRoom", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.LeverDoor", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.PurpleWallEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [], [], [[60, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.LeverDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.PurpleWallHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.LeverDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_C.UpperWastes.SpinLasers", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_C.UpperWastes.RuinsApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.SpinLasersRightEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.SpinLasersMiddleEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.SpinLasersLowerEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.NorthTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.RuinsApproach_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_F.UpperWastes.NorthTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_C.UpperWastes.OutsideRuins", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.FlowersSeed", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Glide", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("Regenerate", player) and s.has("EastHollow.ForestsVoice", player) and s.has("LowerReach.ForestsMemory", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("WestPools.ForestsStrength", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has_any(("Burrow", "Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_C.WindtornRuins.UpperRuinsDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_E.WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_WindtornRuins.RuinsLever", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.UpperRuinsDoor", [], [], [[6, 'Wall'], [6, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Regenerate", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.RuinsLever", player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_C.WindtornRuins.BrokenMural", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.UpperRuinsDoor", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.RuinsLever", player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.FallenPillar", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.HeartBarrier", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.HeartBarrier", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.Escape", player), lambda s: s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Double Jump", "Dash", "Glide", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("Bash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Bash", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Launch", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_F.WindtornRuins.RuinsTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.HeartBarrier", player), lambda s: cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [[16, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.FallenPillar", player), lambda s: s.has_any(("WindtornRuins.HeartBarrier", "Burrow"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_F.WindtornRuins.Escape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Double Jump", "Glide", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Double Jump", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple", "Launch", "Glide"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.HandToHandComplete", player), lambda s: s.has("LowerWastes.HandToHandMapstone", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.EscapeRevisitEC", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.Escape", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Bash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Launch", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and has_health(50, s, player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_C.WeepingRidge.Bottom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_H.WeepingRidge.Bottom", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_E.WeepingRidge.Bottom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Bash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [['Grenade', 1]], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Launch", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Double Jump", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Bash", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has("WindtornRuins.Seir", player) and has_health(50, s, player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_C.WeepingRidge.LaunchArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_H.WeepingRidge.LaunchArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Glide"), player) and has_health(60, s, player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_C.WeepingRidge.AboveTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.PortalEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Bow', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_C.WillowsEnd.Entry", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_E.WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_E.WillowsEnd.Entry", player), lambda s: cost_all(s, player, options, "WillowsEnd.Entry", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.PortalShortcut", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_C.WillowsEnd.GrappleHeartMidPoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_H.WillowsEnd.GrappleHeartMidPoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Grapple", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_C.WillowsEnd.GrappleHeart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_H.WillowsEnd.GrappleHeart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.GrappleWheelsHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [[30, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Glide", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_C.WillowsEnd.BoulderHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_E.WillowsEnd.BoulderHeartPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_F.WillowsEnd.InnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_NonGladesTeleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.PortalShortcut", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.PortalShortcut", player), lambda s: cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [[20, 'Wall']], [[1, 'Bow', 1]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [], [[1, 'Bow', 1]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_Teleporters", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [], [[1, 'Bow', 1]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_C.WillowsEnd.AboveInnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Bow', 1]], [], [[0, [[80, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [], [], [[0, [[80, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_H.WillowsEnd.RedirectHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Launch", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPath", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.RedirectHeartPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_C.WillowsEnd.RedirectHeartPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_C.WillowsEnd.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [], [[80, 'Combat']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Bow', 1], ['Grenade', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Grenade', 2]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_C.WillowsEnd.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_E.WillowsEnd.West", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.InnerTP", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[20, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.InnerTP", player), lambda s: cost_all(s, player, options, "WillowsEnd.West", [], [], [[20, 'Wall']], [[0, [[60, 'Combat']], ['Combat.Dangerous']]], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Grenade', 1]], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_C.WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_H.WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has_all(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_C.WillowsEnd.GlideRooms", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_E.WillowsEnd.GlideRooms", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_E.WillowsEnd.GlideRooms", player), lambda s: cost_all(s, player, options, "WillowsEnd.GlideRooms", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.WindSpinOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_C.WillowsEnd.UpperHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_E.WillowsEnd.UpperHeartPath", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_E.WillowsEnd.UpperHeartPath", player), lambda s: cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [], [['Bow', 1]], [], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Grapple", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.Upper", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Grapple", "Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_C.WillowsEnd.UpperHeartCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.SpinPortalsHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.UpperHeartCheckpoint", [], [], [[30, 'Wall']], [], 0), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperRightEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("WillowsEnd.SpinPortalsHeart", player), "or")
    add_rule(world.get_entrance("Tokk_to_GladesTown.HandToHandPouch", player), lambda s: s.has("EastHollow.HandToHandMap", player), "or")
    add_rule(world.get_entrance("TwillenShop_to_GladesTown.TwillenGemQuest", player), lambda s: s.has("LowerWastes.EerieGemQI", player), "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Overcharge", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Wingclip", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Swap", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Vitality", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Energy", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.Finesse", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.TripleJump", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TwillenShop_to_TwillenShop.LightHarvest", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.Spike", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.SpiritSmash", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.SpiritStar", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.Blaze", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.Sentry", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.Teleport", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.ShockSmash", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.StaticStar", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.ExplodingSpike", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.RapidSentry", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.ChargeBlaze", player), lambda s: s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("OpherShop_to_OpherShop.WaterBreath", player), lambda s: s.has("InnerWellspring.WaterEscape", player) and s.count("200 Spirit Light", player) >= 6, "or")
    add_rule(world.get_entrance("TuleyShop_to_GladesTown.RegrowTheGlades", player), lambda s: s.has("TuleyShop.SelaFlowers", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.SpringPlants", player) and s.has("TuleyShop.LastTree", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.LastTreeBranchRejected", player), lambda s: s.has("WoodsEntry.LastTreeBranch", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.SelaFlowers", player), lambda s: s.has("UpperWastes.FlowersSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.StickyGrass", player), lambda s: s.has("EastPools.GrassSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.Lightcatchers", player), lambda s: s.has("UpperDepths.LightcatcherSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.BlueMoon", player), lambda s: s.has("InnerWellspring.BlueMoonSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.SpringPlants", player), lambda s: s.has("UpperReach.SpringSeed", player), "or")
    add_rule(world.get_entrance("TuleyShop_to_TuleyShop.LastTree", player), lambda s: s.has("WoodsEntry.TreeSeed", player), "or")


def set_gorlek_rules(world, player, options):
    """Gorlek (or medium) rules."""
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "MarshSpawn.Main", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.Main", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshSpawn.Main", [10], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch", "Double Jump"), player) and s.has("HowlsDen.RainLifted", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BridgeEX", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BridgeEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_all(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has("MarshSpawn.LogBroken", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has_any(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.LifepactLedge", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LifepactLedge", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.DamageTreeOpen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.WheelFreed", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("Glide", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_HowlsDen.RightHC", player), lambda s: cost_all(s, player, options, "HowlsDen.UpperLoopExit", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.AboveBoneBridge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.RightHC", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Glide", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Glide", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [], [[0, [[13, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridgeDoor", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [[16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [[16, 'Wall']], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.SecretRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Grenade', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.MillView", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.SpiritTrial", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has("MarshPastOpher.TrialActivation", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialLeftEX", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialLeftEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UnderTrunk", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_H.MarshPastOpher.TrialArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("Sword", "Hammer", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Combat.Aerial", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 2]], [[20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.LeftEyestone", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UpperBowArea", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.UpperBowArea_to_MarshPastOpher.RightEyestone", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UpperBowArea", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_H.MarshPastOpher.PoolsPathEast", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_E.MarshPastOpher.PoolsPathEast", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Teleporter", [], [], [], [[2, 16]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("MarshSpawn.BurrowsOpen", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.LeftKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.LeftKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowLupo", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.BelowLupo", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Sword", player) and s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: cost_all(s, player, options, "MidnightBurrows.East", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.UpperKS", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [], [], [[1, 'Bow', 1]], 1), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained", "Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainMiddle", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Double Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1], ['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has("Combat.Aerial", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [[20, 'Combat'], [13, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [], [], [[0, [[13, 'Combat']], []], [2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.Entrance", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1], ['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Water Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.FarLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.UpperTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.AboveJumppad", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.AboveJumppad", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Bow', 1]], [], [[0, [[13, 'Combat']], []], [2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Launch"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [[13, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [[13, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.TrialApproach", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.TrialApproach", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.TrialApproach", [10], [], [], [[0, [[13, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.SpiritTrial", player), lambda s: s.has("Dash", player) and s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.DashApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and s.has_any(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [30], [], [[13, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [[13, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.TrialActivation", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.CrusherEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [[12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_BeetleFight", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("EastHollow.BeetleDefeated", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("BeetleFight_to_EastHollow.BeetleDefeated", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Launch"), player) and cost_all(s, player, options, "BeetleFight", [35], [], [[250, 'Boss']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Dash", player) and s.has("EastHollow.BeetleDefeated", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: cost_all(s, player, options, "EastHollow.AboveBash", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and s.has_any(("Double Jump", "Dash", "Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimOre", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [5], [], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimMiddleEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("GladesTown.ClearThorns", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("TuleyShop.BlueMoon", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Burrow", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Spear', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [[12, 'Combat'], [12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [[12, 'Combat'], [12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Launch", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 4]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Bash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 4], ['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has_all(("Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.CaveBurrowEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Sword", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("Dash", player) and s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Launch"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[2, 10], [0, [[40, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[2, 10], [0, [[40, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.Upper", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has_any(("Water Dash", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has_any(("Water Dash", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Bash", "Water Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_H.OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[13, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: s.has_any(("Double Jump", "Bash", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [[0, [[13, 'Combat'], [32, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.BasementEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Double Jump", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[0, [[13, 'Combat'], [32, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 3]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Dash", "Glide"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [15], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 2]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_WestGlades.MillApproach", player), lambda s: cost_all(s, player, options, "OuterWellspring.EastDoor", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.TopDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[0, [[24, 'Combat']], ['Combat.Aerial']]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("Dash", "Grapple", "Glide"), player) and s.has("OuterWellspring.TrialActivation", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [15], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.DrainLever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 4]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: s.has_any(("Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has_any(("Grapple", "Glide", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Glide", "Sword"), player) and s.has("InnerWellspring.DrainRoomBottomWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Clean Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTopWheel", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [[16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Hammer", "Clean Water"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomTopWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("InnerWellspring.UpperCorruption", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainRoomTop", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.AbovePole_to_InnerWellspring.BelowDrainLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTree", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinArena", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[24, 'Combat'], [24, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.SpinningRoomOpen", player), lambda s: s.has("InnerWellspring.SpinArena", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Clean Water", player) and s.has("InnerWellspring.SpinPuzzleSolved", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.SpinningRoomOpen", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Combat.Dangerous", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[40, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[40, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [20], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.FirstMud", player), lambda s: cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [], [], [[0, [[40, 'Combat']], ['Combat.Ranged']], [2, 10]], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.MudPitEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.ShriekMeet", player), lambda s: cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [], [[0, [[40, 'Combat']], ['Combat.Ranged']], [2, 10]], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Grenade', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat'], [1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.ShriekMeet", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.LowerKS", player), lambda s: s.has_any(("Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.UpperKS", player), lambda s: s.has_all(("Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.UpperKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.KeystoneDoor", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Regenerate", player) and s.has("WoodsEntry.KeystoneDoor", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[1, 'Combat'], [1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[1, 'Combat'], [1, 'Combat']], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [20], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[0, [[20, 'Combat'], [20, 'Combat'], [20, 'Combat']], ['Combat.Aerial']]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [15], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Hammer", "Bash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("Flap", "Launch"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [10], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [15], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash", "Burrow", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [15], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.AboveHowl", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialStart", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Double Jump", "Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_C.WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_C.WoodsMain.BeforeLog", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.LogBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.LogBlobDestroyed", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.LogBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.Teleporter", [], [], [], [[1, 'Grenade', 1], [1, 'Blaze', 1], [1, 'Sentry', 1]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Hammer", "Sword", "Triple Jump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [], [[1, 'Combat'], [1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [['Grenade', 1]], [], [[0, [[1, 'Combat'], [1, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.LogBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.OrangeTree", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.AbovePit", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Entry", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Bash", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Launch", player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2], ['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1], ['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1], ['Spear', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.CentralEnemyPaths", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.MeltIceEX", player), lambda s: s.has_all(("Bash", "Flap"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BurrowEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BelowLupo", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.CentralFurnacePedestal", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_E.LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [], [[60, 'Combat']], [[1, 'Grenade', 1], [1, 'Shuriken', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.CentralFurnacePedestal", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_E.LowerReach.SoupMoki", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_E.LowerReach.SoupMoki", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Dash", "Sword", "Hammer", "Launch"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: s.has_any(("Double Jump", "Dash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.East", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SnowballHC", player), lambda s: s.has("Burrow", player) and s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Glide"), player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.RoofRightEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash", "Triple Jump"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Double Jump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Clean Water"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player) and cost_all(s, player, options, "LowerReach.ArenaArea", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide", "Sword"), player) and s.has("LowerReach.EastDoorLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.ArenaArea", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.ArenaArea", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("Launch", player) and s.has("LowerReach.EastDoorLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_H.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.WispPathCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_GladesTown.HoleHut", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerReach.TownEntry", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has_any(("Sword", "Dash", "Double Jump", "Launch"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Dash", "Double Jump", "Launch"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer", "Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Water Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Clean Water", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Glide", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Dash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Grapple", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Dash", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Water Dash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Water Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Grapple", "Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [[0, [[60, 'Combat']], ['Combat.Dangerous', 'Combat.Shielded']]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water Dash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Clean Water", "Water Dash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantPaths", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.UpperKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has("Clean Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Bow', 0], [1, 'Spear', 0]], 1), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.EntrySpikesEX", player), lambda s: cost_all(s, player, options, "UpperDepths.Entry", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [], [], [[0, [[32, 'Combat']], ['Combat.Bat', 'Combat.Aerial', 'Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Bash", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.Entry", [30], [], [[1, 'Combat'], [1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Glide", "Bash"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']], [2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [[1, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [10], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[1, 'Flash', 1]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [[12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [[12, 'Combat']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[16, 'Wall'], [16, 'Wall'], [12, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[16, 'Wall'], [16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [30], [], [[16, 'Wall'], [16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has("Bash", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [['Grenade', 2]], [[16, 'Wall'], [16, 'Wall'], [12, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has("Launch", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[16, 'Wall'], [16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("UpperDepths.LightPuzzle", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: s.has_all(("Dash", "Launch"), player) and can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.HiveEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has_all(("Dash", "Launch"), player) and s.has("UpperDepths.EntryKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Central", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [[1, 'Shuriken', 0], [1, 'Grenade', 0]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[1, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.SecondKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.Central", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.Central", [], [['Grenade', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.RightHealthKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has_all(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: s.has_any(("DepthsLight", "Dash", "Bash", "Glide", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[12, 'Combat'], [12, 'Combat'], [12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[12, 'Combat'], [12, 'Combat'], [12, 'Combat']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall'], [12, 'Combat'], [12, 'Combat'], [12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall'], [12, 'Combat'], [12, 'Combat'], [12, 'Combat']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.MoraPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.BelowDoorOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash"), player) and s.has_any(("Triple Jump", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Dash", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Hammer"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Dash", "Sword"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Dash", player) and s.has("BreakCrystal", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[1, 'Wall'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("DepthsLight", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [30], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.Central", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [[12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [[12, 'Combat']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Launch", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Grenade', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Grapple", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Launch", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [30], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("DepthsLight", player) and s.has_any(("Glide", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("DepthsLight", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Glide", "Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Sword", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[1, 'Flash', 1]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [], [[1, 'Flash', 1]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [], [[1, 'Flash', 1]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.RightEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.TreeArea", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [[8, 'Combat'], [8, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has_any(("Grapple", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Grenade', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Double Jump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [8, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[8, 'Combat'], [8, 'Combat']], [[0, [[1, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Double Jump", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "PoolsApproach.WheelFreed"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and s.has("PoolsApproach.WheelFreed", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Glide", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Water Dash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Water Dash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Combat.Ranged", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap", "Bash"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap", "Bash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("EastPools.BelowEntryLeverBubble", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.EntryLever", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [20], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Combat.Dangerous", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[1, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.AboveDoorOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Dash", "Sword"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightArenas", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [20], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.FightArenas", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("EastPools.FightArenas", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Water Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Glide"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide", "EastPools.CentralRoomBubbleFree"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "UpperPools.KeystoneRoomBubbleFree"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Flap", player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Flap", "Double Jump"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_H.UpperPools.BeforeKeystoneDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TrialActivation", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.KeystoneRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Dash"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("UpperPools.ButtonDoorAboveTree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Water Dash", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.AboveTree", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("UpperPools.DrainRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword"), player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Hammer"), player) and s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has_any(("Water Dash", "Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [[24, 'Combat'], [20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [[24, 'Combat'], [20, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubblesEC", player), lambda s: s.has("UpperPools.BubbleSpamLever", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.LeftBubbleSpamRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "WestPools.Teleporter", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Burrow"), player) and s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player) and s.has("Combat.Dangerous", player) and s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", [], [], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WestPools.Teleporter", [], [], [[32, 'Combat']], [[2, 3]], 1), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and s.has_any(("Bash", "Water Dash"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", [], [], [], [[2, 3]], 1), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [], [], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("KwolokFight_to_WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash"), player) and s.has_any(("Double Jump", "Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", [85], [], [[250, 'Boss']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGroundsEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_all(("Regenerate", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple", "Glide"), player) and s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump", "Glide"), player) and s.has("WindtornRuins.Seir", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "Glide"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player) and s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.SpiritTrial", player), lambda s: s.has_all(("Burrow", "Dash", "Grapple"), player) and s.has("LowerWastes.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: cost_all(s, player, options, "LowerWastes.SunsetView", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Dash", "Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.MuncherTunnel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 2]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has_any(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [30], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Double Jump", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Glide", "Burrow", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Dash", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandShard", player), lambda s: s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "LowerWastes.LastStandArea", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.SkeetoHiveEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and can_buy_map(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.UpperPath", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Burrow"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: s.has_any(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.UpperKS", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Grenade', 1]], [[24, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("UpperWastes.KeystoneDoor", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [], [], [], [[2, 14]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.LeverDoor", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [14], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and s.has("Combat.Dangerous", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [], [], [[60, 'Combat']], [[2, 14]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has_any(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [], [], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RuinsApproach", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [], [[1, 'Grenade', 1], [2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [], [[1, 'Grenade', 1], [2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Burrow", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [30], [], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [], [[32, 'Combat'], [60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.HeartBarrier", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [], [[16, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Bash", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Glide", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple", "Double Jump"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.Escape", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.Escape", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [], [], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Double Jump", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [40], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Bow', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("Double Jump", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Grenade', 1], [2, 20]], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Launch", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [40], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [], [], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Grenade', 1]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [4], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Grapple", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Grapple", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.PortalShortcut", player), lambda s: cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.LupoMap", player), lambda s: can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("WillowsEnd.PortalShortcut", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Grenade', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 40]], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [40], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Glide", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [], [[80, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [10], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Upper", [20], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [20], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Grenade', 1]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Grenade', 2]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: cost_all(s, player, options, "WillowsEnd.West", [20], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Grapple"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Glide", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Grapple", "Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [40], [], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Bash", "Double Jump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Double Jump", "Glide", "Bash"), player), "or")


def set_gorlek_glitched_rules(world, player, options):
    """Gorlek (or medium) rules with glitches"""
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: cost_all(s, player, options, "MarshSpawn.OpherBarrier", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.TokkBarrier", player), lambda s: cost_all(s, player, options, "MarshSpawn.Cave", [], [], [[48, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.LifepactLedge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: cost_all(s, player, options, "MarshSpawn.RegenDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: cost_all(s, player, options, "MarshSpawn.HowlApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Sentry', 1]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveBoneBridge", [], [], [[48, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Sentry', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Clean Water", "Water Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBarrier", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveTeleporter", [], [], [[48, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeLedge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.ToOpherBarrier", player), lambda s: cost_all(s, player, options, "MarshPastOpher.MillView", [], [], [[48, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Sentry', 1]], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Sentry', 1]], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Double Jump", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", [15], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Double Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.Entrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.DashApproach", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: cost_all(s, player, options, "WestHollow.DashArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [10], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 2]], [[32, 'Combat'], [24, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: cost_all(s, player, options, "EastHollow.AboveBash", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: cost_all(s, player, options, "EastHollow.Kwolok", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashHC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashHC", player), lambda s: cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.AboveBash", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("EastHollow.DepthsLever", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Sentry', 5]], [], [], 1), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.AboveBash", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("EastHollow.DepthsLever", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Sentry', 4]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("TuleyShop.StickyGrass", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Dash", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: cost_all(s, player, options, "GladesTown.UpperWest", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 4], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Sentry', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: cost_all(s, player, options, "GladesTown.BelowBountyShard", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: cost_all(s, player, options, "GladesTown.AboveOpher", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.PlayfulMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash", "Clean Water"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [['Sentry', 1]], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 2]], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [[2, 10], [0, [[40, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestGlades.Center", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.Center", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Upper", [], [['Sentry', 1]], [[40, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: cost_all(s, player, options, "WestGlades.Upper", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("OuterWellspring.LifeHarvestLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [['Sentry', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump"), player) and s.has_any(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [[3, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [[3, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Sentry', 1]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Triple Jump"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Grapple", "Glide", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [['Grenade', 1]], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 1]], [], [[2, 15]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainAreaExit", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("InnerWellspring.DrainRoomTopWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("InnerWellspring.UpperCorruption", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("['Sword', 'Sentry']", player) and can_buy_map(s, player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[30, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [[30, 'Shuriken']], [[0, [[40, 'Combat']], ['Combat.Ranged']]], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.MudPitEX", player), lambda s: cost_all(s, player, options, "WoodsEntry.FirstMud", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [15], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Sentry', 1]], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Sentry', 1]], [[3, 'Wall'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Sentry', 1]], [[3, 'Wall'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: cost_all(s, player, options, "WoodsMain.GiantSkull", [], [['Sentry', 1]], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [['Sentry', 1]], [[1, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: cost_all(s, player, options, "WoodsMain.BrokenOwl", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Sentry', 1]], [], [[0, [[1, 'Combat']], []], [2, 20]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [['Sentry', 1]], [], [[0, [[1, 'Combat'], [1, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.OrangeTree", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerReach.Entry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1], ['Sentry', 1]], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 2], ['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 3], ['Spear', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 4]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_F.LowerReach.OutsideTPRoom", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.Teleporter", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Teleporter_to_LowerReach.OutsideTPRoom", player), lambda s: cost_all(s, player, options, "LowerReach.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.MeltIceEX", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindLantern", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindLantern", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.East", [], [['Sentry', 1]], [], [[1, 'Grenade', 1], [1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.East", [], [['Sentry', 1]], [], [[1, 'Grenade', 1], [1, 'Spear', 1]], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.IceCavern", player), lambda s: cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.EastFurnace", player), lambda s: cost_all(s, player, options, "LowerReach.PastSnowball", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.RoofRightEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.RoofRightEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has_any(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.FreezeEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Clean Water"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump", "Glide"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Dash", "Double Jump", "LowerReach.FreezeEastFurnace"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: cost_all(s, player, options, "LowerReach.VeralHome", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple", "Dash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple", "Sword"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupPaths", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.SpringSeed", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.HiddenEX", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 2], ['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Sentry', 4]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Sentry', 1]], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Bash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.SwimEC", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [[60, 'Shuriken']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [30], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [30], [['Sentry', 1]], [], [[0, [[12, 'Combat'], [12, 'Combat']], []]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide", "Grapple"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_F.UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.HiveEX", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Sentry', 1]], [[25, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.OutsideMoraFight", player), lambda s: cost_all(s, player, options, "UpperDepths.Teleporter", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.Central", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_LowerDepths.East", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[60, 'Shuriken'], [12, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has_all(("Grapple", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [[20, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 1]], [[20, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 2]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [['Sentry', 2]], [[20, 'Wall']], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "MoraEscape", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [10], [['Sentry', 3]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 4]], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_any(("Bash", "Launch"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[60, 'Shuriken']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [[1, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "['Sword', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Sentry', 1]], [[8, 'Combat'], [8, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Sentry', 1]], [[32, 'Combat'], [8, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Sentry', 1]], [[8, 'Combat'], [8, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Dash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: cost_all(s, player, options, "EastPools.BehindEntryDoor", [20], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_any(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_any(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: cost_all(s, player, options, "EastPools.BehindEntryDoor", [20], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: cost_all(s, player, options, "EastPools.TokkBubble", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.AboveDoorOre", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Sentry', 1]], [], [[1, 'Spear', 1], [1, 'Grenade', 1], [2, 20]], 1), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.LupoArea", player), lambda s: cost_all(s, player, options, "EastPools.NextToLupoOre", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: cost_all(s, player, options, "EastPools.LupoArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: cost_all(s, player, options, "EastPools.MissilePuzzle", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Dangerous", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [[32, 'Combat'], [32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [[32, 'Combat'], [32, 'Combat']], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 2]], [], [[2, 10]], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and s.has_any(("Clean Water", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Sentry', 2]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash"), player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [[2, 20]], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: cost_all(s, player, options, "UpperPools.AboveTree", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Double Jump", "Dash", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Grapple"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Sentry', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: cost_all(s, player, options, "LowerWastes.SandPot", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_any(("Double Jump", "Bash", "Launch"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.BeforeMinesEntrance", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [[60, 'Shuriken']], [[0, [[60, 'Combat']], ['Combat.Dangerous']]], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_WindtornRuins.LowerRuins", player), lambda s: s.has_all(("Regenerate", "Burrow"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [[60, 'Shuriken']], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_any(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: cost_all(s, player, options, "LowerWastes.EastTP", [], [['Sentry', 1]], [[20, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", [], [['Sentry', 1]], [[60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Sentry', 1]], [], [[2, 30]], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Sentry', 1]], [[32, 'Combat'], [60, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.BrokenMural", player), lambda s: s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [['Sentry', 1]], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: cost_all(s, player, options, "WillowsEnd.Entry", [20], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [40], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 2]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Sentry', 1]], [[80, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [40], [['Sentry', 1]], [[80, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']", "Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Sentry', 1]], [[80, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Upper", [20], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Sentry', 1]], [], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Sentry', 1]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Sentry', 2]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.West", [], [['Sentry', 1]], [[10, 'Wall']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.GlideHeartPath", [], [['Sentry', 1]], [[32, 'Combat']], [], 1), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: cost_all(s, player, options, "WillowsEnd.GlideHeartPath", [], [['Sentry', 1]], [[32, 'Combat']], [[2, 20]], 1), "or")


def set_kii_rules(world, player, options):
    """Kii (or hard) rules"""
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshSpawn.Main", [], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.Main", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.BridgeEX", player), lambda s: s.has("MarshSpawn.ToOpherBarrier", player) and cost_all(s, player, options, "MarshSpawn.OpherBarrier", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.OpherBarrier_to_MarshSpawn.Main", player), lambda s: cost_all(s, player, options, "MarshSpawn.OpherBarrier", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("HowlsDen.RainLifted", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Hammer", player) and s.has("MarshSpawn.LogBroken", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.LogBroken", player) and s.has_any(("Glide", "HowlsDen.RainLifted"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Glide", player) and s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has_any(("Glide", "Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and s.has_any(("Sword", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.LifepactLedge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_E.MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [20], [], [], [[1, 'Blaze', 3], [1, 'Flash', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [30], [['Spear', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [20], [], [], [[1, 'Blaze', 3], [1, 'Flash', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [30], [['Spear', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10, 10, 10], [], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [[32, 'Combat'], [13, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [[32, 'Combat'], [13, 'Combat']], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [[32, 'Combat'], [13, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [[13, 'Combat']], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10, 10], [], [[13, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [[2, 10], [1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Bash", "Glide", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Water Dash", player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_any(("Hammer", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [], [], [[1, 'Blaze', 5], [1, 'Sentry', 3], [2, 20]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.BurrowsEntry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [6], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [6], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: cost_all(s, player, options, "MarshSpawn.RegenDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: cost_all(s, player, options, "MarshSpawn.HowlApproach", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("Glide", player) and s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Sword", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Shuriken', 1]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 10, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 10], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 10], [['Flash', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 10], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10], [['Shuriken', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10], [['Flash', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10], [['Sentry', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10], [['Flash', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.HowlsDenEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopExit", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has_any(("Hammer", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Water Dash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("Water Dash", player) and s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [], [[1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [10], [], [], [[1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.MagnetShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Grenade', 1]], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridgeDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10, 10], [], [], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("HowlsDen.RainLifted", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [], [[16, 'Wall']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [10], [], [[16, 'Wall']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "HowlsDen.SecretRoom", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.SecretRoom", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10, 10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Grapple"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_all(("Sword", "Clean Water"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBridge", player), lambda s: s.has("HowlsDen.BoneBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has_any(("Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeLedge", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has_any(("Bash", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "MarshPastOpher.MillView", [], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "MarshPastOpher.MillView", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", [], [['Grenade', 1]], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialLeftEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UnderTrunk", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [10], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [[20, 'Wall']], [[1, 'Shuriken', 3], [1, 'Sentry', 4], [1, 'Blaze', 6]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [10], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Blaze', 3]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Bow', 2], [1, 'Spear', 3]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Grenade', 1], ['Spear', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Spear', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Spear', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Grenade', 1], ['Spear', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Hammer", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Bow', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has_any(("Glide", "Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_all(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [20], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2], [2, 10]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[2, 10], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [20], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Shuriken', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Flash', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [20], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MidnightBurrows.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player) and cost_all(s, player, options, "MidnightBurrows.Teleporter", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.LeftKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowLupo", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.Lever", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [15], [['Blaze', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", [15], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MidnightBurrows.Central", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.PortalRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Sentry', 3], [2, 30]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.LeverRoom", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [45], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [45], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.LeverRoom", [105], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [75], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [90], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.East_to_MidnightBurrows.DenConnection", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.DenConnection_to_MidnightBurrows.PortalCorridor", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [], [], [], [[1, 'Shuriken', 4], [1, 'Sentry', 4], [2, 15]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [15], [], [], [[1, 'Sentry', 5]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [30], [], [], [[1, 'Sentry', 3], [1, 'Blaze', 4]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [45], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: cost_all(s, player, options, "MidnightBurrows.PortalCorridor", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.UpperKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [15], [['Blaze', 6]], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [45], [['Spear', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [60], [], [], [[1, 'Flash', 2], [1, 'Blaze', 4]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [90], [], [], [[1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowUpperKS_to_MidnightBurrows.PortalCorridor", player), lambda s: cost_all(s, player, options, "MidnightBurrows.BelowUpperKS", [150], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Hammer", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Double Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Double Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Sword", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1], ['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [10], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Blaze', 6], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Hammer", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Dash", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Sword", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [[1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Water Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1], ['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("Hammer", "WestHollow.UpperTongueExtended"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueRetracted", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Dash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has("Water Dash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Sword", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Hammer", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Sentry', 2]], [[13, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.PolesPound", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.AboveJumppad", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_all(("Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [10], [['Spear', 2]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [10], [['Shuriken', 2]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [10], [['Flash', 2]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [10], [['Sentry', 2]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [10], [], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [['Shuriken', 4]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [['Flash', 4]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [['Sentry', 4]], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [[13, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.PolesPound", [], [], [[13, 'Combat']], [[1, 'Shuriken', 3], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [[13, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [['Spear', 1]], [], [[0, [[13, 'Combat']], []]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Bash"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [30], [], [[13, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [[13, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.TrialActivation", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: cost_all(s, player, options, "WestHollow.DashApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WestHollow.DashCrushers", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [10], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [], [], [[1, 'Shuriken', 4], [1, 'Flash', 4], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [10], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [[12, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestHollow.AboveDashSemisolid", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has_all(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Sword", "Launch"), player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("Deflector", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("Deflector", player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [], [], [[1, 'Spear', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [], [], [[1, 'Spear', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Spear', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Glide"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashTreeCheckpoint", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AboveDepths", player), lambda s: s.has("EastHollow.DepthsLever", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [], [], [[1, 'Grenade', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [], [], [[1, 'Sentry', 2], [1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Dash", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Sentry', 3], [2, 20]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: cost_all(s, player, options, "EastHollow.Kwolok", [], [['Sentry', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Glide", "Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Hammer"), player) and s.has("Glide", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Glide"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashHC", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashTreeCheckpoint", player), lambda s: s.has("EastHollow.DepthsLever", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [], [], [[1, 'Spear', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Double Jump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Hammer", "Flash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.West", [20], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Blaze', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.West", [10, 10], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", [10], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.West", [10], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "GladesTown.West", [], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.Teleporter", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Flash', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Double Jump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Double Jump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.ArcingShard", player), lambda s: s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("Bash", player) and s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("Hammer", player) and s.has("GladesTown.OnwardsAndUpwards", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Double Jump"), player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", [32], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [32], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", [16], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [16], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [26], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [42], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [10, 10], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Flash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [10, 42], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [10, 26], [], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Hammer", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Hammer", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.BelowBountyShard", [], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.LeftAboveCoals", player), lambda s: cost_all(s, player, options, "GladesTown.BelowBountyShard", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 4]], 3), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [], [], [[1, 'Blaze', 2], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.PlayfulMoki", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Regenerate", "Grapple"), player) and s.has("TuleyShop.SpringPlants", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Hammer", "Sword"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Bow', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Sword", player) and s.has_any(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_E.WestGlades.PastTown", player), lambda s: s.has("Hammer", player) and s.has_any(("Clean Water", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash", "Clean Water"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash", "Clean Water"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [[40, 'Combat']], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.PastTown", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [60], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [80, 40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Ranged", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [[40, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [20, 10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.PastTown", [20, 10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[0, [[40, 'Combat']], ['Combat.Ranged']], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Glide", player) and s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WestGlades.PastTown", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [30], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.SwimEC", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.SwimEC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LowerPoolEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Bash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LowerPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LowerPoolEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Glide"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [[40, 'Combat']], [[2, 40], [1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [10], [], [], [[2, 40], [1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[2, 40], [1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [20], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.LowerPool", [20], [], [[40, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [20, 10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [20, 10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.LowerPool", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.Center", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [10, 20], [], [[40, 'Combat']], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", [10, 10], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [10, 10], [], [[40, 'Combat']], [[1, 'Sentry', 2], [1, 'Flash', 2], [1, 'Shuriken', 2], [1, 'Spear', 2], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Dash", player) and s.has("Combat.Ranged", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Center", [10, 40], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Dash", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [10, 40], [], [[40, 'Combat']], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.Center", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "WestGlades.Center", [20], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.Center", [20], [], [[40, 'Combat']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [20], [], [[40, 'Combat']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [20], [], [[40, 'Combat']], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.Upper", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [20, 30], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LowerPool", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.Center", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Center", [], [], [[40, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.PastTown", player), lambda s: cost_all(s, player, options, "WestGlades.Center", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Sentry', 6]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Hammer", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [[40, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "WestGlades.Upper", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [20], [], [], [[1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Bash"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Launch"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_H.OuterWellspring.EntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceDoorOpen", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [[16, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Blaze', 0]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.BasementEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [35], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.BasementEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.LifeHarvestEntry", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_any(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [55], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [95], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("OuterWellspring.FallingWheel", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("OuterWellspring.FallingWheel", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Hammer", "Glide"), player) and s.has("OuterWellspring.FallingWheel", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [20], [], [], [[1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has_any(("Glide", "Sword", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [], [[1, 'Sentry', 4], [1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestLeverPulled", player), lambda s: cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [20], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [], [[1, 'Sentry', 4], [1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestLeverPulled", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [20], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.Basement", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_any(("Water Dash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Grapple", "Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[0, [[12, 'Combat']], []]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [[12, 'Combat']], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Glide", "Hammer"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Water Dash", "Glide", "Hammer"), player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [[12, 'Combat']], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Blaze', 6], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1], ['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.WestDoor", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 1]], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has_all(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [[1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [[1, 'Spear', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [30], [['Grenade', 1], ['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Shuriken', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.TrialActivation", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Blaze', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [15], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [30], [['Grenade', 2], ['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [[1, 'Spear', 2], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [15], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [15], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [], [[1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [15], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialRoom", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.SpiritTrial", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("OuterWellspring.TrialActivation", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.TrialStart", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.TrialStart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: cost_all(s, player, options, "InnerWellspring.EntranceDoor", [15], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", [], [], [], [[2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Hammer", player) and s.has("InnerWellspring.ShortCutWheel", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Hammer", player) and s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Glide", player) and s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: cost_all(s, player, options, "InnerWellspring.ShortcutLever", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Blaze', 5], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Shuriken', 4]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [60], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [40], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaEntrance", player), lambda s: s.has("InnerWellspring.DrainLever", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Clean Water"), player) and s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Clean Water"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [20], [], [[12, 'Combat'], [12, 'Combat']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [20, 20], [], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Sword"), player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [40], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20, 20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Bash", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [[10, 'Wall']], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [80], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [40], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2], [2, 40]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [[40, 'Combat']], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [], [], [[1, 'Shuriken', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Grapple", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [15], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']], [2, 10]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("Clean Water", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: cost_all(s, player, options, "InnerWellspring.GrappleThroughZigZagSpikes", [], [], [], [[2, 35]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [75], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [75], [], [], [[0, [[40, 'Combat']], ['Combat.Dangerous']]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [85], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [10], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Clean Water", player) and s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [60], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [60], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [70], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.TopSecondRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Dash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_all(("Dash", "Hammer", "Grapple"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash", "Clean Water"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [], [], [[1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [95], [], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [60], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [40], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [20], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [['Sentry', 6]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.MudPitEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [], [[1, 'Shuriken', 3]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.FirstMud", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [15], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [[1, 'Combat'], [1, 'Combat']], [[1, 'Shuriken', 3], [1, 'Sentry', 3], [1, 'Spear', 3]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Grenade', 1], ['Flash', 2]], [[1, 'Combat'], [1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [['Grenade', 2], ['Spear', 1]], [[1, 'Combat'], [1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "WoodsEntry.Teleporter", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has_any(("Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.LowerKS", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Hammer", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has_any(("Double Jump", "Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [], [[2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.BehindWallOre", player), lambda s: s.has_all(("Flap", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Glide", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [15], [], [[1, 'Combat'], [1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [15], [], [[1, 'Combat'], [1, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [35], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [35], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Combat']], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Combat.Ranged", player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [[40, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_any(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_all(("Sword", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has_any(("Glide", "Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [15], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Spear', 3], [1, 'Shuriken', 3], [1, 'Sentry', 3], [1, 'Blaze', 4], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [25], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [], [[1, 'Shuriken', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has_any(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Combat.Ranged", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [[40, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has_any(("Glide", "Launch"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Triple Jump", player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [], [[2, 20], [0, [[1, 'Combat']], []]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.GiantSkull", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [45], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [], [[3, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BrokenOwl", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [], [['Blaze', 3]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: cost_all(s, player, options, "WoodsMain.PetrifiedHowl", [15, 15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "WoodsMain.BrokenOwl", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.TrialStart", [], [], [], [[2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsMain.TrialStart", [], [], [], [[1, 'Sentry', 3], [1, 'Blaze', 5]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [], [], [], [[1, 'Grenade', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [45], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: cost_all(s, player, options, "WoodsMain.TrialEnd", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OverflowShard", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.BeforeLog", player), lambda s: cost_all(s, player, options, "WoodsMain.TrialEnd", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", [], [], [], [[1, 'Sentry', 5]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has_any(("Double Jump", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_C.WoodsMain.BeforeLog", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.LogBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [], [], [[0, [[1, 'Combat']], []], [2, 20]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.Teleporter", player), lambda s: s.has("WoodsMain.LogBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [], [], [[1, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and s.has_any(("Sword", "Hammer", "Triple Jump"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WoodsMain.LogBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.BeforeLog", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.Teleporter", player), lambda s: cost_all(s, player, options, "WoodsMain.OrangeTree", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.Teleporter", player), lambda s: cost_all(s, player, options, "WoodsMain.OrangeTree", [15], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Flash', 2], [1, 'Sentry', 2], [2, 15]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [45], [], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has_any(("Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.FeedingGrounds", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [15], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: cost_all(s, player, options, "WoodsMain.FeedingGrounds", [15], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Glide", "Bash"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Entry", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Entry", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Entry", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Entry", [20], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has_any(("LowerReach.ThawBaurFurnace", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Glide", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [1, 'Blaze', 3], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Spear', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Sword", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: cost_all(s, player, options, "LowerReach.Icefall", [20], [['Grenade', 1]], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("LowerReach.LeftFurnace", player) and s.has_any(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Triple Jump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [[25, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Double Jump", "Clean Water"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Hammer", "Bash"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Hammer", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Hammer", "Grapple"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[0, [[25, 'Combat']], ['Combat.Aerial']]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Hammer", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Hammer", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.LupoMap", player), lambda s: s.has("Bash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.CentralEnemyPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Glide", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 2]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Dash", "Hammer"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and s.has("LowerReach.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and can_buy_map(s, player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("LowerReach.Lever", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [20], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [20], [['Spear', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.Central", [10], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("LowerReach.Lever", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Bash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has_all(("Glide", "Sword"), player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveEntry", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.Lever", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Hammer"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Sentry', 2]], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Spear', 1]], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Double Jump"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Regenerate", "Burrow", "Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: cost_all(s, player, options, "LowerReach.SecondSoup", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.SecondSoup", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: cost_all(s, player, options, "LowerReach.CentralFurnacePedestal", [], [], [], [[2, 10]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.WindChannel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindChannel", [60], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindChannel", [60], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[2, 40]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_E.LowerReach.SoupMoki", player), lambda s: s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.FreezeCentralFurnace", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.EastEnemyPaths_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.TPLantern", player), lambda s: cost_all(s, player, options, "LowerReach.East", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.East", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.East", [], [], [[12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.East", [], [], [[12, 'Combat']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has_any(("LowerReach.ThawCentralFurnace", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.EastEnemyPaths", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Glide", "Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("LowerReach.RolledSnowball", player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.RolledSnowball", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.RolledSnowball", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.IceCavern", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [20], [['Blaze', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.SwimmingPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [40], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Water Dash", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Triple Jump", "Glide", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Dash", "Glide", "Double Jump", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 2]], [], [[1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [20, 40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Water Dash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Water Dash", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [20, 20], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.EastDoorLantern", player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Spear', 1]], [], [[1, 'Sentry', 3], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [], [], [[2, 40]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Water Dash"), player) and s.has("LowerReach.ThawEastFurnace", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ArenaBeaten", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [], [], [[1, 'Shuriken', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindSpinners", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Dash"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Grapple", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Sentry', 2]], [[12, 'Combat'], [12, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [10, 10], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Glide", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash", "Clean Water"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Glide", "Grapple", "Bash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: cost_all(s, player, options, "LowerReach.VeralHome", [80], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has_all(("Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "LowerReach.VeralHome", [60], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has_all(("Water Dash", "Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "LowerReach.TrialStart", [80], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.MiddleLeftKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.MiddleLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Sentry', 3], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Sword", "Dash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [[1, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: cost_all(s, player, options, "LowerReach.TrialStart", [20, 40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20, 20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.SwimEX", player), lambda s: s.has("Water Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.SwimEX", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 6]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 4]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Sentry', 3]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Grenade', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Shuriken', 2]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [['Shuriken', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [40], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Dash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Water Dash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [1, 'Flash', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [20], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.KeystoneRoom", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawedPaths", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupPaths", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_all(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.SwingPoleEX", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupFrozenPaths", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 4]], 3), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_E.UpperReach.OutsideTreeRoom", player), lambda s: s.has("Clean Water", player) and s.has("UpperReach.ThawFurnace", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Double Jump", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [], [], [[1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Grapple", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [20], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has("Bash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.OutsideTreeRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_UpperReach.TreeRoomLedge", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "UpperDepths.Entry", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: cost_all(s, player, options, "UpperDepths.Entry", [40], [], [], [[1, 'Shuriken', 4]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.FirstFirefly", player), lambda s: cost_all(s, player, options, "UpperDepths.Entry", [70], [], [], [[1, 'Sentry', 4], [1, 'Flash', 4]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("EastHollow.DepthsOpen", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.Entry", [30], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [30], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [], [], [[1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.Entry", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperDepths.FirstKSRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.LightPuzzle", player), lambda s: s.has("Launch", player) and s.has("UpperDepths.EntryKeystoneDoor", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [30], [], [[16, 'Wall'], [16, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 0]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [30], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.FirstKSRoom", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.EntryKeystoneDoor", player), lambda s: can_keystones(s, player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Flash', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.HiveEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.KeydoorLedge", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and cost_all(s, player, options, "UpperDepths.BelowHive", [], [['Flash', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.BelowHive_to_UpperDepths.Teleporter", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.BelowHive", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperDepths.Teleporter_to_UpperDepths.Central", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.Teleporter", [30], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.LeftHealthKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.KeystoneHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [], [[1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [60], [], [], [[1, 'Sentry', 4], [1, 'Shuriken', 4]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [], [[2, 30], [1, 'Sentry', 2], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.LightcatcherSeed", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.OutsideMoraFight", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.MoraPath_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.MoraPath", [], [], [[20, 'Wall']], [[2, 40], [1, 'Sentry', 3], [1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [], [[20, 'Wall']], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: s.has("Regenerate", player) and s.has_any(("Double Jump", "Dash", "Launch"), player) and cost_all(s, player, options, "MoraFirstPhase", [50], [], [[165, 'Boss']], [], 3), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "MoraEscape", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "MoraSecondPhase", [60], [], [[165, 'Boss']], [], 3), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_UpperDepths.ForestsEyes", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MoraSecondPhase", [60], [], [[165, 'Boss']], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Blaze', 3], [1, 'Shuriken', 3]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 3]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Blaze', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Blaze', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has_all(("Regenerate", "Sword"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Regenerate", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [60], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has_all(("Double Jump", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerDepths.West", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "LowerDepths.West", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Hammer", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Glide", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has_all(("Double Jump", "Clean Water"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Water Dash", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", [20, 20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has("Water Dash", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.West", [150], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Bash", "Clean Water"), player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerDepths.West", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.West", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.West", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Grenade', 1]], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Flash", "UpperDepths.ForestsEyes"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Flash", "UpperDepths.ForestsEyes"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Dash", "Bash", "Grapple", "Glide"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple", "Glide"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and s.has_any(("Sword", "Hammer", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("Hammer", "Sword"), player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Glide", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Grapple", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Grenade', 1]], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("UpperDepths.ForestsEyes", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player) and s.has("UpperDepths.ForestsEyes", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Flash', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Flash', 1]], [], [[2, 50]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("UpperDepths.ForestsEyes", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 50]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Double Jump", player) and s.has("UpperDepths.ForestsEyes", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has_all(("Bash", "Hammer"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TrialActivation", player), lambda s: s.has_all(("Dash", "Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has_any(("Dash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has("DepthsLight", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[1, 'Sentry', 3], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[1, 'Sentry', 3], [1, 'Flash', 2], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and s.has_any(("Sword", "Double Jump", "Grapple", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[1, 'Shuriken', 2], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Sword", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[1, 'Sentry', 7]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 4], [1, 'Sentry', 5]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [[1, 'Wall']], [[1, 'Shuriken', 2], [1, 'Sentry', 3], [1, 'Blaze', 5]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[1, 'Shuriken', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.TreeArea", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2], [1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 15]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Grenade', 1], ['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [['Shuriken', 1]], [[8, 'Combat'], [8, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.MillPath", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEC", player), lambda s: cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [8, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [8, 'Combat']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [20], [], [[32, 'Combat'], [8, 'Combat'], [1, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [8, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Grapple", "Double Jump", "Sword", "Hammer", "PoolsApproach.WheelFreed"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Glide"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Grenade', 1], ['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [40], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [40], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [40], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [120], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 200]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Grenade', 1]], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has_any(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Launch", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Bash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [120], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [130], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Launch", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [130], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Double Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [130], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Bash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Water Dash", "Bash", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has_any(("Launch", "Grapple", "Double Jump", "Hammer", "PoolsApproach.WheelFreed"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Bash", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("PoolsApproach.WheelFreed", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Dash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Glide"), player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has_any(("Grapple", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [200], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [220], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and s.has("Hammer", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Blaze', 9], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Glide"), player) and s.has("PoolsApproach.WheelFreed", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Sword"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Double Jump", "Dash", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has_any(("Double Jump", "Sword"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash"), player) and s.has_any(("Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Hammer"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 1]], [], [[1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump", "Dash"), player) and s.has_any(("Triple Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Hammer"), player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and s.has_any(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Hammer", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Hammer", "Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Launch", "Double Jump", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Combat.Dangerous", player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [10], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Dash", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[0, [[1, 'Combat']], ['Combat.Ranged']], [2, 10]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastPools.LeverRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player) and s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.TwoCrushersEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [10], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Double Jump", "Grapple", "Flap"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BubbleCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Clean Water"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and s.has_any(("PoolsApproach.WheelFreed", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [100], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("Sword", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 5], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Bash", "Dash", "Hammer"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Glide", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[1, 'Spear', 3], [1, 'Blaze', 3], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[0, [[32, 'Combat']], ['Combat.Dangerous']], [2, 10]], 3), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TokkBubble", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.BehindEntryDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.TPArea", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [80], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Clean Water", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [[2, 160]], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [120], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "EastPools.TokkBubble", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [[32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TPArea", player), lambda s: s.has_all(("Flap", "Bash", "Grapple"), player) and s.has("EastPools.TokkBubbleFree", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[0, [[1, 'Combat'], [32, 'Combat']], ['Combat.Ranged', 'Combat.Dangerous']]], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.TPArea", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TPArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.TPArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has_all(("Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.TPArea", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.TPArea", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.TPArea", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.BehindEntryDoor", player), lambda s: s.has("Hammer", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.TPArea", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.ArenaWall", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Hammer"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Clean Water", "Glide"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Shuriken', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.AboveTpEX", player), lambda s: cost_all(s, player, options, "EastPools.AboveFishingPool", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.AboveTpEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "Water Dash"), player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Clean Water", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has_all(("Regenerate", "Bash", "Water Dash"), player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Grenade', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: cost_all(s, player, options, "EastPools.NextToLupoOre", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.BehindCrusherEX", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.CentralRoom", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.LupoArea", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.TPArea", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoPurpleFloor", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [['Spear', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [200], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Double Jump"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Glide", "Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has_any(("Bash", "Launch", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Glide", "Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomPurpleWall", player), lambda s: cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[2, 100]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Clean Water", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Clean Water", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Bash"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water Dash", "Clean Water"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [160], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.LupoArea", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.CentralRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [[32, 'Combat']], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.GrassSeed", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [160], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[2, 180]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_EastPools.CentralRoom", player), lambda s: s.has("Regenerate", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1], [1, 'Bow', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Shuriken', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Sentry', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Flap", player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Flap", player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [160], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Water Dash", "Flap"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoom", player), lambda s: s.has_all(("Water Dash", "Flap"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [20], [], [[32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Clean Water"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [40], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and s.has("Hammer", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [20], [['Grenade', 1], ['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Hammer"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Flap", "Glide"), player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Bash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Shuriken', 1]], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.ButtonDoorAboveTree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.SwimDashCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("UpperPools.ButtonDoorAboveTree", player) and s.has("UpperPools.TreeRoomRightBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperPools.AboveTree", [], [], [[1, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.AboveTree", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.TreeRoomEntrance", player), lambda s: cost_all(s, player, options, "UpperPools.AboveTree", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [120], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [80], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [120], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [60], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Sword", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Sword", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Dash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [20], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Launch", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [60], [], [], [[1, 'Grenade', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [60, 60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has("UpperPools.UpperWaterDrained", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has_any(("UpperPools.UpperWaterDrained", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [], [], [[2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Clean Water", "UpperPools.UpperWaterDrained"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [60, 20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [[24, 'Combat'], [20, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.LeftBubblesEX", player), lambda s: cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.LeftBubblesEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[2, 80]], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[2, 80]], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and cost_all(s, player, options, "WestPools.Teleporter", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WestPools.Teleporter", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "WestPools.Teleporter", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestPools.Teleporter", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1], [1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WestPools.Teleporter", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowOre", player), lambda s: s.has_all(("Water Dash", "Burrow"), player) and s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.Teleporter", [100, 80, 100], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.Teleporter", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and cost_all(s, player, options, "WestPools.Teleporter", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestPools.LeftKwolokPlatform", [220], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.EscapeRevisitEX", player), lambda s: cost_all(s, player, options, "WestPools.RightKwolokPlatform", [140], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.EscapeRevisitEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Regenerate", "Water Dash"), player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "Clean Water"), player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "KwolokEscape", [180], [], [], [], 3), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Launch", "Water Dash"), player) and cost_all(s, player, options, "KwolokEscape", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "Water Dash"), player) and cost_all(s, player, options, "KwolokEscape", [], [], [], [[2, 120]], 3), "or")
    add_rule(world.get_entrance("KwolokFight_to_WestPools.ForestsStrength", player), lambda s: s.has_all(("Regenerate", "Clean Water", "Water Dash"), player) and s.has_any(("Double Jump", "Launch", "Dash"), player) and cost_all(s, player, options, "KwolokFight", [85], [], [[250, 'Boss']], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Double Jump", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "Dash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "Double Jump", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Glide", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: cost_all(s, player, options, "LowerWastes.SunsetView", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_E.LowerWastes.Shovel", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.Shovel", player), lambda s: s.has_any(("Bash", "Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [], [], [[0, [[24, 'Combat']], []], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Blaze', 3]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and s.has_any(("Glide", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Spear', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Glide", "Sword"), player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has_all(("Glide", "Sword"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.WoodenBridge", player), lambda s: cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[20, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.LeverArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has_all(("Sword", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Spear', 1]], [[60, 'Combat'], [32, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: cost_all(s, player, options, "LowerWastes.MinesEntrance", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: cost_all(s, player, options, "LowerWastes.MinesEntrance", [30], [], [], [[0, [[60, 'Combat'], [32, 'Combat']], ['Combat.Dangerous']]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and s.has_any(("LowerWastes.SandPlatformLever", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("LowerWastes.SandPlatformLever", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Sentry', 3], [2, 90]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Grapple", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandShard", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.LastStandArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.MuncherClimb", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has_all(("Sword", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump", "Sword"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has_any(("Hammer", "Triple Jump"), player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Spear', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.UpperPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_Tokk", player), lambda s: cost_all(s, player, options, "LowerWastes.EastTP", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_UpperWastes.KeystoneRoom", player), lambda s: s.has_all(("Regenerate", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_keystones(s, player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_keystones(s, player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[1, 'Grenade', 1], [1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_LowerWastes.EastTP", player), lambda s: s.has_all(("Regenerate", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", [], [], [], [[1, 'Spear', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleMiddle", [], [], [[60, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2], [2, 60]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.MissilePuzzleRight", [30], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Double Jump", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Glide", "Burrow"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Glide", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [], [], [[1, 'Shuriken', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Burrow", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has_any(("Bash", "Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and s.has("Sword", player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [30], [], [], [[1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [[1, 'Sentry', 2], [2, 30]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30, 30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 2], ['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Glide", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 3]], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.WallOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [], [[1, 'Sentry', 2], [2, 30]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [], [], [[2, 30]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Burrow", "Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30, 30], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 1], ['Sentry', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2], ['Sentry', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 3]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30, 30], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 3], ['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Grenade', 4]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Burrow"), player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Burrow", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [], [], [[1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.WallOre", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [30], [], [], [], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [0, [[32, 'Combat']], []]], 3), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "UpperWastes.OutsideRuins", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.BrokenMural", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.BrokenMural", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Hammer", player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [['Sentry', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Launch"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [], [], [], [[1, 'Sentry', 5], [1, 'Shuriken', 5]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [30], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 3]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [70], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Dash", "Double Jump"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Burrow", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Double Jump", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", [], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("Dash", player) and s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "WindtornRuins.LowerRuins", [], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has_any(("Dash", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Sword", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Sword", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Launch", "Bash"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Regenerate", "Bash", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Sentry', 5]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("Bash", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [20], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [60], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [], [], [[2, 20]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [40], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 3]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Launch", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Regenerate", player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[1, 'Blaze', 4], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Regenerate", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [60], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_E.WillowsEnd.GrappleHeart", player), lambda s: cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 4]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Hammer", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.GrappleWheelsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [], [], [[1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has_any(("Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2], [2, 80]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [], [], [[2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Shuriken', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_E.WillowsEnd.AboveInnerTP", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Blaze', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.AboveInnerTP", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has_any(("Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.East", [20], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: cost_all(s, player, options, "WillowsEnd.East", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: cost_all(s, player, options, "WillowsEnd.RedirectHeartPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [], [[10, 'Wall']], [[2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [], [[10, 'Wall']], [[1, 'Sentry', 2], [1, 'Blaze', 4]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [], [['Grenade', 1]], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_E.WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("BreakCrystal", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [], [[80, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [], [[80, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.East", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [], [[80, 'Combat']], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.Upper", [90], [], [[80, 'Combat']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Grenade', 2]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Upper", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall']], [[1, 'Grenade', 1], [2, 40]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall']], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.GlideHeartPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_E.WillowsEnd.GlideRooms", player), lambda s: cost_all(s, player, options, "WillowsEnd.GlideRooms", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Grenade', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.GlideRooms", [40, 80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [60], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Bash"), player) and s.has("WillowsEnd.SpinPortalsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [160], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [120], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [80], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Glide", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [40], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [100], [], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has("WillowsEnd.SpinPortalsHeart", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("WillowsEnd.SpinPortalsHeart", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperRightEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperRightEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartCheckpoint", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Launch", "Bash"), player), "or")


def set_kii_glitched_rules(world, player, options):
    """Kii (or hard) rules with glitches."""
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [[1, 'Blaze', 4], [1, 'Sentry', 3]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[30, 'Shuriken']], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [20], [], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [60], [['Grenade', 1]], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [40], [], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [40], [['Grenade', 1]], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [45], [], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 1]], [[30, 'Shuriken']], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.SnowballEnemyPaths_to_LowerReach.TPLantern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SnowballEnemyPaths", [], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Glide", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "LowerReach.Snowball", [20], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [[1, 'Sentry', 2], [2, 20]], 3), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Sentry', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Dash", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 3), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Regenerate", "Burrow", "Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Grenade', 2]], [], [], 3), "or")


def set_unsafe_rules(world, player, options):
    """Unsafe rules."""
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.ToOpherBarrier", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Bash", player) and s.has("HowlsDen.RainLifted", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceShard", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: s.has("Clean Water", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: cost_all(s, player, options, "MarshSpawn.BrokenBridge", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: s.has("Water Dash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.ResilienceOre", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player) and cost_all(s, player, options, "MarshSpawn.BrokenBridge", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.OpherBarrier", player), lambda s: s.has("MarshSpawn.LogBroken", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.TokkBarrier", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: s.has_all(("Grapple", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("MarshSpawn.CaveFight", player) and cost_all(s, player, options, "MarshSpawn.Cave", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowArena", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Sand", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [], [[40, 'Combat'], [32, 'Combat'], [20, 'Combat'], [20, 'Combat'], [24, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LifepactLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LifepactLedge_to_MarshSpawn.BurrowFightArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.LifepactLedge", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.LifepactLedge", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.CrusherSwimEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [], [], [], [[2, 20], [1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BurrowsOpen", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowsEntry_to_MarshSpawn.BeforeBurrows", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.LongSwimEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.LongSwimEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.LongSwimEX", player), lambda s: s.has("Water Dash", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [35], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Deflector", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Deflector", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and s.has("Deflector", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Bash", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Bash", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has_any(("Double Jump", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshSpawn.PoolsPath", [6], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: cost_all(s, player, options, "MarshSpawn.RegenDoor", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RecklessShard", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Sword", player) and s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Dash", player) and s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and s.has_any(("Dash", "Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has_all(("Bash", "Glide", "Dash"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.AboveHowlArena", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [10, 10, 10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlsDenEntrance_to_MarshSpawn.MokkTheBrave", player), lambda s: s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopExit_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("HowlsDen.UpperLoopExitBarrier", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_C.HowlsDen.UpperLoopEntrance", player), lambda s: cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [[12, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.MagnetShard", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Glide"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridgeDoor_to_HowlsDen.OutsideSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [], [], [[1, 'Blaze', 1], [1, 'Bow', 1], [1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Spear', 1]], [[16, 'Wall']], [[1, 'Spear', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.MidwayBottomLoop_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "HowlsDen.MidwayBottomLoop", [], [['Grenade', 1]], [[16, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.SecretRoomWall", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "HowlsDen.SecretRoom", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.SecretRoomWall", player), lambda s: cost_all(s, player, options, "HowlsDen.SecretRoom", [], [], [[20, 'Wall']], [[1, 'Bow', 0], [1, 'Spear', 0], [1, 'Shuriken', 0], [1, 'Sentry', 0]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.SecretRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Spear', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.SecretRoom", player), lambda s: s.has_any(("Water Dash", "Glide"), player) and cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [10], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.AboveTPEX", player), lambda s: s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.BoneBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("DenShrine_to_HowlsDen.CombatShrineCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "DenShrine", [], [], [[32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [20, 'Combat'], [4, 'Refill'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [24, 'Combat'], [24, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.TrunkWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialStart_to_MarshPastOpher.SpiritTrial", player), lambda s: s.has("Grapple", player) and s.has("MarshPastOpher.TrialActivation", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrunkWall", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.UnderTrunk", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrunkWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UnderTrunk", [], [], [[20, 'Wall']], [[1, 'Blaze', 0], [1, 'Sentry', 0], [1, 'Grenade', 0]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrialLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialActivation", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash", "Glide", "Grapple", "Launch"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshShrine_to_MarshPastOpher.CombatShrineCompleted", player), lambda s: s.has("Combat.Aerial", player) and cost_all(s, player, options, "MarshShrine", [], [], [[20, 'Combat'], [20, 'Combat'], [2, 'Refill'], [32, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [8, 'Combat'], [2, 'Refill'], [32, 'Combat'], [20, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.SwingPoleEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [], [], [[1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [['Blaze', 2]], [], [[1, 'Spear', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowPath", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.SwingPoleEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Bow', 2], [1, 'Spear', 2], [1, 'Grenade', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [], [], [[1, 'Bow', 1], [1, 'Spear', 1], [1, 'Grenade', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.UpperBowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [], [], [[1, 'Bow', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowArea", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Grenade', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.PoolsPathMiddle", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Clean Water", "Sword"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [['Spear', 1]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [10, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has_all(("Hammer", "Clean Water"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [], [[1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [5], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEast", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [5], [], [], [[1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [20], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1]], [], [[2, 10], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [10], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_any(("Double Jump", "Hammer", "Bash"), player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.Teleporter_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Bash", player) and s.has("MarshSpawn.BurrowsOpen", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.BelowLupo_to_MidnightBurrows.Central", player), lambda s: True, "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.Lever", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.Lever", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [], [['Shuriken', 1]], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has_all(("Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.DeflectorShard", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.Central", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.Central", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.Central_to_MidnightBurrows.TabletRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.Central", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.LeverRoom", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[2, 15]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Bash", player) and s.has("MidnightBurrows.Lever", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.East", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [], [], [[1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has_all(("Bash", "Sword"), player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "MidnightBurrows.LeverRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.LeverRoom_to_MidnightBurrows.PortalRoom", player), lambda s: cost_all(s, player, options, "MidnightBurrows.LeverRoom", [75], [], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalCorridor_to_MidnightBurrows.BelowUpperKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_MarshPastOpher.BowArea", player), lambda s: s.has("MarshPastOpher.EyestoneDoor", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: cost_all(s, player, options, "WestHollow.Entrance", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.Entrance", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [], [], [[1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.PurpleDoorOpen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3]], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Regenerate", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoorEnemyPaths", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoorEnemyPaths_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Regenerate"), player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoorEnemyPaths", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("Launch", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Grenade', 1]], [], [[2, 60]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [], [], [[1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Bow', 1], [1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has_any(("Hammer", "Double Jump", "Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [], [], [[1, 'Sentry', 2], [2, 20]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Bash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleSolved", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.UpperTongueExtended", player), lambda s: cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleEX", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.RockPuzzleEX", player), lambda s: s.has("Water Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Launch", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueRetracted", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [90], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [20], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.RockPuzzle", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.Entrance", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Dash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_any(("Bash", "Launch", "Double Jump"), player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_any(("Bash", "Launch", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [50], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: cost_all(s, player, options, "WestHollow.FarLeftRoom", [50], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Sword", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Bash", "Launch", "Double Jump"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and s.has_any(("Dash", "Double Jump", "Glide", "Hammer"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [['Bow', 1]], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.UpperTongueExtended", player), lambda s: cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.LowerTongueExtended", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.LowerTongueRetracted", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and s.has_any(("Sword", "Hammer", "Dash", "Bash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Double Jump", player) and s.has("WestHollow.FullyDrained", player) and s.has("Hammer", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.QuickshotShard", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.SwimEC", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [105], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.SwimEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [70], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.SwimEC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [50], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 3]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1], ['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1], ['Shuriken', 1]], [], [[1, 'Blaze', 0], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1], ['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("Glide", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1], ['Shuriken', 1]], [], [[1, 'Blaze', 0], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Double Jump", "Bash"), player) and s.has_any(("Triple Jump", "Glide"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and s.has("Launch", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [60], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.TrialStart_to_WestHollow.SpiritTrial", player), lambda s: s.has("WestHollow.TrialActivation", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.PolesPound", [20], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and s.has("Bash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.DoorLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.DashApproach", [], [], [], [[2, 10], [1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashArea_to_WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashTree", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has_any(("Bash", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [['Sentry', 2]], [[12, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashCrushers", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has_any(("Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [], [], [[1, 'Shuriken', 2], [2, 10]], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveDashSemisolid_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Bash", player) and s.has("WestHollow.DoorLever", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Sentry', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.Teleporter", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("BeetleFight_to_EastHollow.BeetleDefeated", player), lambda s: cost_all(s, player, options, "BeetleFight", [], [], [[250, 'Boss']], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.BeetleDefeated", player) and cost_all(s, player, options, "EastHollow.VoiceDoorPlatform", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.GladesApproachOre", player), lambda s: s.has("Hammer", player) and s.has("Deflector", player) and s.has_any(("Launch", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.MapMoki", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "EastHollow.MapMoki", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has_all(("Hammer", "Dash"), player) and cost_all(s, player, options, "EastHollow.MapMoki", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.GromsWall", player), lambda s: s.has("Deflector", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has_all(("Grapple", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Shuriken', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Sword", player) and s.has("Dash", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Shuriken', 1]], [], [[1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.AboveBash", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.RightKwolokEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.KwolokSwimLeftEX", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.AfterBeetleFight", player), lambda s: cost_all(s, player, options, "EastHollow.Kwolok", [], [], [], [[1, 'Shuriken', 2], [2, 10]], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [['Shuriken', 2]], [], [[0, [[1, 'Combat']], []], [2, 20]], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110], [], [], [[1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.BashHC", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AboveDepths_to_EastHollow.DepthsExteriorEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastHollow.AboveDepths", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimMiddleEX", player), lambda s: cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[2, 60]], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "GladesTown.Teleporter", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and s.has("Clean Water", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Bash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [[2, 100]], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[2, 100]], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Water Dash", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: cost_all(s, player, options, "GladesTown.Teleporter", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoHouse", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "GladesTown.Teleporter", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.LowerOre", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: cost_all(s, player, options, "GladesTown.TwillenHome", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.StickyGrass", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Bash", "Sword"), player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has_all(("Hammer", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Dash", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Sword", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has_all(("Hammer", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.West", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "GladesTown.West", [20], [], [[12, 'Combat'], [12, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "GladesTown.West", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "GladesTown.West", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has("Double Jump", player) and s.has("TuleyShop.StickyGrass", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperWest", player), lambda s: s.has_all(("Grapple", "Double Jump", "Dash", "Glide"), player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_C.GladesTown.MotayHut", player), lambda s: s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Double Jump"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Bash", player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.Lightcatchers", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_C.GladesTown.UpperWest", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("GladesTown.OnwardsAndUpwards", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.UpperLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "GladesTown.UpperWest", [], [], [], [[1, 'Grenade', 1], [1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.Teleporter", player), lambda s: True, "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_C.GladesTown.AcornMoki", player), lambda s: s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Clean Water"), player) and s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Launch", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Bash", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2], ['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Double Jump", player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 2]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and s.has("Clean Water", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("GladesTown.CaveEntrance", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Grenade', 1]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AboveCaveEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.Teleporter", player), lambda s: s.has("Dash", player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Bash", player) and s.has("TuleyShop.Lightcatchers", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.AboveOpher", player), lambda s: cost_all(s, player, options, "GladesTown.LeftAboveCoals", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_C.GladesTown.AboveOpher", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("TuleyShop.SpringPlants", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_TuleyShop", player), lambda s: s.has("GladesTown.TuleySpawned", player) and cost_all(s, player, options, "GladesTown.AboveOpher", [], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: cost_all(s, player, options, "GladesTown.PlayfulMoki", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.LupoSwimMiddleEX", player), lambda s: cost_all(s, player, options, "GladesTown.LupoHouse", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.LupoSwimMiddleEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "GladesTown.LupoHouse", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: cost_all(s, player, options, "GladesTown.LupoHouse", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.LupoHouse_to_GladesTown.Teleporter", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "GladesTown.LupoHouse", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Hammer", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and s.has_any(("Sword", "Hammer", "Flash"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grapple", player) and s.has("TuleyShop.StickyGrass", player) and cost_all(s, player, options, "GladesTown.HoleHut", [], [], [], [[1, 'Blaze', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHutEntrance_to_C.GladesTown.HoleHutEntrance", player), lambda s: s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.GromsWall", player), lambda s: s.has_all(("Bash", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Clean Water", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and s.has_any(("Water Dash", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Bow', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Spear', 2]], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.PastTown", [60], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [60], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.LowerPool", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[0, [[40, 'Combat']], ['Combat.Ranged']]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("Hammer", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has_all(("Hammer", "Glide"), player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[2, 10], [1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Double Jump", "Grapple", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Grapple", "Double Jump", "Glide"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.Center", [10], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WestGlades.Center", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestGlades.Center", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.UpperPoolEX", player), lambda s: cost_all(s, player, options, "WestGlades.Upper", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.UpperPoolEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestGlades.Upper", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestGlades.Upper", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 5]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and s.has_any(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Hammer", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesShrine_to_WestGlades.CombatShrineCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and s.has("Combat.Shielded", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "GladesShrine", [], [], [[32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [3, 'Refill'], [40, 'Combat'], [40, 'Combat'], [40, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [24, 'Combat'], [24, 'Combat'], [3, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_E.OuterWellspring.EntranceDoor", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.FallingWheel", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [[16, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.BasementEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.SwimEX", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.SwimEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.SwimEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Shuriken', 5]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [95], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.Basement", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [75], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [], [], [[1, 'Shuriken', 5], [1, 'Sentry', 5]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("OuterWellspring.FallingWheel", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Double Jump", player) and s.has("OuterWellspring.FallingWheel", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "OuterWellspring.FallingWheel"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Dash", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_WestGlades.MillApproach", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Bash", player) and s.has("OuterWellspring.LifeHarvestWallBroken", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Dash", "Grapple", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.BasementEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Bash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [], [], [[0, [[12, 'Combat']], []]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Clean Water", player) and s.has_any(("Water Dash", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("OuterWellspring.EntranceDoorOpen", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [[12, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [], [[12, 'Combat']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Blaze', 2]], [[12, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("Water Dash", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Blaze', 2]], [[12, 'Combat']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [[3, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.WestDoorBlueMoonFree", player), lambda s: s.has_all(("Double Jump", "Grapple"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [], [[3, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has("OuterWellspring.WestDoorBlueMoonFree", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Bash", player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [[20, 'Wall']], [[1, 'Shuriken', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [['Grenade', 1]], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [25], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.TopDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.AboveWestDoor", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.WestDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [['Shuriken', 1]], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.EastDoor", [10], [['Grenade', 1], ['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.RightWallMidpoint", player), lambda s: cost_all(s, player, options, "OuterWellspring.EastDoor", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.TopDoor", player), lambda s: s.has("InnerWellspring.TopDoorOpen", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveWestDoor_to_OuterWellspring.EastDoor", player), lambda s: cost_all(s, player, options, "OuterWellspring.AboveWestDoor", [], [], [], [[1, 'Blaze', 3], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grapple", player) and s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.RightWallMidpoint_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.RightWallMidpoint", [15], [['Grenade', 2], ['Sentry', 2], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEX", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.RightWallEC", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialApproach", [], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.EastDoor", player), lambda s: s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialApproach_to_OuterWellspring.AboveEntranceDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialRoom_to_OuterWellspring.TrialStart", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialRoom", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TrialStart_to_OuterWellspring.TrialRoom", player), lambda s: cost_all(s, player, options, "OuterWellspring.TrialStart", [], [], [], [[2, 30]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.WaterSwitchEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [40, 60], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThornShardArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.ThreeWheels", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [45], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [45], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("InnerWellspring.ThreeWheels", player) and cost_all(s, player, options, "InnerWellspring.EntranceDoor", [60], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and s.has("Glide", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: s.has_any(("Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [45], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: cost_all(s, player, options, "InnerWellspring.ThornShardArea", [45], [], [], [[1, 'Shuriken', 3], [1, 'Flash', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ShortcutLever", player), lambda s: cost_all(s, player, options, "InnerWellspring.ThornShardArea", [60], [['Spear', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("InnerWellspring.ShortCutWheel", player) and cost_all(s, player, options, "InnerWellspring.ShortcutLever", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.ShortcutLever_to_InnerWellspring.ThornShardArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Hammer"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_any(("Dash", "Sword"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 3]], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 3]], [[10, 'Wall']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [['Grenade', 2]], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [['Grenade', 2]], [[10, 'Wall']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Shuriken', 3], [1, 'Blaze', 5], [1, 'Flash', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [], [[1, 'Shuriken', 3]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [], [[12, 'Combat'], [12, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEntrance", [], [['Grenade', 1], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20, 20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEX_to_InnerWellspring.DrainAreaExit", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaEX", [], [], [[10, 'Wall']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 3], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoomCenter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainAreaExit", [15], [], [], [[1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaExit_to_InnerWellspring.DrainRoom", player), lambda s: s.has("Glide", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoom", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomCenter_to_InnerWellspring.DrainRoomTop", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomCenter", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has_any(("Glide", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2], [2, 15]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.LaserOre", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoomTop_to_InnerWellspring.BelowDrainLever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoomTop", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.AbovePole", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.GrappleTreeEX", player), lambda s: cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.AboveSpinArenaEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EastDoor_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.TopDoorOpen", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "InnerWellspring.EastDoor", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [], [], [[1, 'Spear', 1], [2, 15]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Dash", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.PastSpinPuzzle", player), lambda s: s.has("Double Jump", player) and s.has("InnerWellspring.SpinPuzzleSolved", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [], [], [[2, 15]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.EastDoor", player), lambda s: s.has("InnerWellspring.SpinningRoomOpen", player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[1, 'Spear', 1], [2, 15]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has_any(("Double Jump", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzle", player), lambda s: s.has_any(("InnerWellspring.SpinPuzzleSolved", "Clean Water"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.TopSecondRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.GrappleThroughZigZagSpikes_to_InnerWellspring.PastSpinPuzzle", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.TopSecondRoom_to_InnerWellspring.GrappleThroughZigZagSpikes", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.SwimOre", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.SwimOre", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [], [], [[1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Hammer"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [40], [['Sentry', 2]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash", "Water Dash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [20], [['Sentry', 2]], [], [[1, 'Shuriken', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "InnerWellspring.EscapeSequence", [], [['Sentry', 4]], [], [[1, 'Shuriken', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.BelowTeleporter", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WoodsEntry.FirstMud_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.FirstMud", player), lambda s: s.has("Glide", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.Teleporter", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.BelowTeleporter_to_WoodsEntry.TwoKeystoneRoom", player), lambda s: cost_all(s, player, options, "WoodsEntry.BelowTeleporter", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WoodsEntry.Teleporter_to_WoodsEntry.LedgeOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.UpperKS", player), lambda s: s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WoodsEntry.TwoKeystoneRoom_to_WoodsEntry.BelowTeleporter", player), lambda s: cost_all(s, player, options, "WoodsEntry.TwoKeystoneRoom", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("Deflector", player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.LowerKS", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has_all(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.BelowFourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [], [], [[40, 'Combat']], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and s.has("Deflector", player) and s.has_any(("Triple Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AfterKuMeet_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.AfterKuMeet", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [], [], [[0, [[1, 'Combat'], [1, 'Combat']], []], [2, 20]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Spear', 1]], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.AfterKuMeet", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Ranged", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Shuriken', 2]], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("WoodsMain.WallOreLedge_to_WoodsMain.FourKeystoneRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.WallOreLedge", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.KSRoomYellowBarrierBroken", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.RightKS", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Spear', 2], [1, 'Sentry', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [15], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.LowerKS", player), lambda s: s.has("WoodsMain.KSRoomYellowBarrierBroken", player) and cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [2, 15]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.BelowKeystonesEX", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [], [], [[1, 'Grenade', 1], [1, 'Bow', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BehindDoorRoofEX", player), lambda s: s.has_all(("Glide", "Dash"), player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.GiantSkull_to_WoodsMain.BalloonLure", player), lambda s: s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsMain.GiantSkull", [15], [], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has("Launch", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BalloonLureYellowBarrierBroken", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has_all(("Dash", "Bash"), player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Bash", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Grenade', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [], [], [[1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.PetrifiedHowl", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [15], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLure", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.AboveHowl", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WoodsMain.PetrifiedHowl_to_WoodsMain.BelowHiddenOre", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: s.has_any(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.AboveHowl", player), lambda s: cost_all(s, player, options, "WoodsMain.BrokenOwl", [], [], [], [[2, 15]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BrokenOwl_to_WoodsMain.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_C.WoodsMain.TrialStart", player), lambda s: s.has("WoodsMain.TrialActivation", player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Hammer", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.MidwayTrial", player), lambda s: s.has_all(("Sword", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("WoodsMain.TrialStart_to_WoodsMain.AboveHowl", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WoodsMain.TrialStart", [], [['Shuriken', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.TrialEnd", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.MidwayTrial_to_WoodsMain.BeforeLog", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.MidwayTrial", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WoodsMain.TrialEnd", [], [['Shuriken', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.TrialEnd_to_WoodsMain.OrangeTree", player), lambda s: s.has_all(("Burrow", "Sword"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.AboveHowl", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.LogBlobDestroyed", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WoodsMain.BeforeLog", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.LogBlobDestroyed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [45], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has("Dash", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [45], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WoodsMain.Teleporter", [45], [], [], [[1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.Teleporter", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.BeforeLog", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.LogBlobDestroyed", player), "or")
    add_rule(world.get_entrance("WoodsMain.OrangeTree_to_WoodsMain.AbovePit", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "WoodsMain.OrangeTree", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_E.WoodsMain.AbovePit", player), lambda s: s.has("Bash", player) and s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch"), player), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsMain.OrangeTree", player), lambda s: cost_all(s, player, options, "WoodsMain.AbovePit", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.AbovePit_to_WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsShrine", player), lambda s: True, "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Glide", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Bash", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Grenade', 1], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.FeedingGrounds", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_WoodsMain.AbovePit", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WoodsShrine_to_WoodsMain.CombatShrineCompleted", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and s.has("Combat.Bat", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WoodsShrine", [], [], [[40, 'Combat'], [24, 'Combat'], [20, 'Combat'], [20, 'Combat'], [20, 'Combat'], [4, 'Refill'], [80, 'Combat'], [80, 'Combat'], [32, 'Combat'], [4, 'Refill'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [1, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Entry", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player) and cost_all(s, player, options, "LowerReach.Entry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Entry", [20], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.Icefall", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Hammer", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has("Glide", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Grenade', 1]], [], [[1, 'Spear', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Sword", "Hammer"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has_any(("Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawBaurFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Icefall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Dash", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.LeftFurnace", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Grenade', 1], ['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 40]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Combat.Aerial", player) and s.has("Clean Water", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide", "Sword"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Spear', 1]], [], [[1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Spear', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Grapple", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Grapple", "Sword"), player) and s.has("LowerReach.LeftFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Sword", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Clean Water", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Sword", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Water Dash", player) and s.has("LowerReach.LeftFurnace", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Water Dash", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [[1, 'Spear', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Double Jump", player) and s.has("LowerReach.LeftFurnace", player) and cost_all(s, player, options, "LowerReach.Icefall", [20], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.AboveEntry", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Sword", "Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.CentralEnemyPaths_to_LowerReach.Entry", player), lambda s: s.has("Bash", player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Sword", "Hammer"), player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Sentry', 1], [1, 'Blaze', 1], [1, 'Spear', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Sword", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.AboveDoorEX", player), lambda s: s.has_all(("Sword", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has_all(("Dash", "Sword"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerReach.Central", [], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Dash", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.TPLeftEX", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.ThawCentralFurnace", player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Grenade', 2]], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Sword"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has_all(("Dash", "Hammer"), player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Sword", player) and s.has("LowerReach.Lever", player), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.Entry", player), lambda s: s.has("Glide", player) and s.has("LowerReach.Lever", player) and cost_all(s, player, options, "LowerReach.Central", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Sword"), player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawCentralFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.OutsideTPRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.BelowTokk", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.KeystoneRoom", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [[32, 'Combat']], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.BelowTokk", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.BelowTokk_to_UpperReach.BurrowArea", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.BelowTokk", [], [['Spear', 1]], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.ThawCentralFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.WindLantern", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Flap", "Bash"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupoEX", player), lambda s: s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has_all(("Burrow", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [['Sentry', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("Flap", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SecondSoup", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.CentralEnemyPaths", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.SecondSoup_to_LowerReach.BelowLupo", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.CentralFurnacePedestal_to_LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindBottomEX", player), lambda s: s.has("LowerReach.WindLantern", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer", "Bash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Double Jump", "Dash", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.WindChannel", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SoupMoki", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.PastSnowball", player), lambda s: s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Hammer", player) and s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.SnowballEnemyPaths", player), lambda s: s.has("Bash", player) and s.has("LowerReach.RolledSnowball", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.IceCavern", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.IceCavern", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("Bash", player) and s.has("LowerReach.EastDoorLantern", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Grenade', 2], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.EastFurnace", player), lambda s: s.has("Bash", player) and s.has("LowerReach.ThawEastFurnace", player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("LowerReach.ThawEastFurnace", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.ArenaBeaten", player), lambda s: s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.ArenaArea", [], [], [[60, 'Combat'], [60, 'Combat'], [60, 'Combat'], [40, 'Combat'], [24, 'Combat'], [24, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has("Sword", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.SwimmingPool", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Glide", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WindSpinners", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_H.LowerReach.WispPathCheckpoint", player), lambda s: s.has("Double Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_H.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_E.LowerReach.WispPathCheckpoint", player), lambda s: s.has_all(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.WindSpinners", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.BridgeWispPath", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "LowerReach.VeralHome", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.CatalystShard", player), lambda s: s.has_all(("Water Dash", "Bash", "Flap"), player) and cost_all(s, player, options, "LowerReach.VeralHome", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has_all(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TownEntry", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [], [['Grenade', 1]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [['Grenade', 1], ['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TownEntry", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [80], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TownEntry", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TownEntry", [60], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.TownEntry_to_LowerReach.TrialStart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TownEntry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.SpiritTrial", player), lambda s: s.has("Glide", player) and s.has("LowerReach.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.RightKS", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.UpperLeftKS", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "LowerReach.TrialStart", [60], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.MiddleLeftKS", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.MiddleLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.BottomLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: cost_all(s, player, options, "LowerReach.TrialStart", [10, 40], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TownEntry", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerReach.TrialStart", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Launch", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Sentry', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Blaze', 2], [1, 'Sentry', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 2], [1, 'Flash', 2]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "Sword"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.ThawFurnace", player), lambda s: s.has_all(("Flap", "Bash"), player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: s.has("Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.SwimEX", player), lambda s: s.has("Water Dash", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.SwimEX", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupFrozen", player), lambda s: s.has("UpperReach.FreezeFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Blaze', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer", "Glide", "Grapple"), player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.OutsideTreeRoom", player), lambda s: s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.KeystoneSnapPlantThawed", player), lambda s: s.has("Sword", player) and s.has("UpperReach.ThawFurnace", player) and cost_all(s, player, options, "UpperReach.KeystoneRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlant", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlant_to_UpperReach.UpperSoup", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawed_to_UpperReach.UpperSoupThawed", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneSnapPlantThawed", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneSnapPlantThawedPaths_to_UpperReach.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [], [], [], [[1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.LowerKS", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.SwingPoleEX", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.SwingPoleEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.UpperSoupThawedPaths", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupFrozenPaths", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.UpperSoupThawedPaths", player), lambda s: s.has_all(("Flap", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.LowerKS", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [20], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupThawedPaths_to_UpperReach.MiddleRightKS", player), lambda s: cost_all(s, player, options, "UpperReach.UpperSoupThawedPaths", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.OutsideTreeRoom_to_UpperReach.UpperSoupThawed", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("UpperReach.ThawFurnace", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_all(("Bash", "Hammer"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoom_to_C.UpperReach.TreeRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_UpperDepths.EntrySpikesEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Launch", player) and s.has("EastHollow.DepthsOpen", player), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("EastHollow.DepthsOpen", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has_all(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: cost_all(s, player, options, "UpperDepths.FirstFirefly", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryOre", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.LeftEntryKS", player), lambda s: s.has_all(("Sword", "Double Jump"), player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_C.UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.FirstKSRoom_to_E.UpperDepths.FirstKSRoom", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.FirstKSRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.RightKeystonePath", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 3]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("Bash", player) and s.has("UpperDepths.EntryKeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperDepths.KeydoorLedge_to_UpperDepths.BelowHive", player), lambda s: s.has("UpperDepths.EntryKeystoneDoor", player) and s.has_any(("UpperDepths.LightPuzzle", "DepthsLight"), player) and cost_all(s, player, options, "UpperDepths.KeydoorLedge", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.RightKeystonePath_to_UpperDepths.RightEntryKS", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.RightKeystonePath", [], [['Flash', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.Central_to_E.UpperDepths.Central", player), lambda s: s.has("Launch", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.BossPathEX", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.SecondKSRoom", [60], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 3]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_UpperDepths.MoraPath", player), lambda s: cost_all(s, player, options, "UpperDepths.SecondKSRoom", [60], [['Flash', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.OutsideMoraFight_to_UpperDepths.Teleporter", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "UpperDepths.OutsideMoraFight", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("MoraFirstPhase_to_MoraEscape", player), lambda s: cost_all(s, player, options, "MoraFirstPhase", [], [], [[165, 'Boss']], [], 5), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has_all(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("MoraSecondPhase_to_UpperDepths.ForestsEyes", player), lambda s: cost_all(s, player, options, "MoraSecondPhase", [], [], [[165, 'Boss']], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.LeftEX", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Shuriken', 3], [1, 'Spear', 4]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_UpperDepths.BelowHive", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.West", player), lambda s: cost_all(s, player, options, "UpperDepths.LowerConnection", [], [['Shuriken', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("Sword", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1], [1, 'Spear', 2]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [30], [], [], [[1, 'Sentry', 2], [1, 'Spear', 3]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [60], [], [], [[1, 'Sentry', 1], [1, 'Spear', 1], [1, 'Flash', 1], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("UpperDepths.LowerConnection_to_LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "UpperDepths.LowerConnection", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has_all(("Sword", "Clean Water"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.West", [140, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Shuriken', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has_all(("Sword", "Clean Water"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Sword", player) and s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", [140, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.SwimEC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [], [[2, 120]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.LeftEX", player), lambda s: s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Dash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Bash", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Sword", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("DepthsShrine_to_LowerDepths.CombatShrineCompleted", player), lambda s: s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "DepthsShrine", [], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [40, 'Combat'], [4, 'Refill'], [32, 'Combat'], [32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Bow', 1]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Dash", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Bash", "Grapple"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.SpiritTrial", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Glide"), player) and s.has("LowerDepths.TrialActivation", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has_any(("Triple Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Flash', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "LowerDepths.Central", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3], [2, 30]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.Central", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Hammer", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Grapple", player) and s.has("BreakCrystal", player) and s.has("UltraGrapple", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Sword", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", [30, 30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Flash', 1], ['Shuriken', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "LowerDepths.East", [30], [['Flash', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Shuriken', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30, 30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [30], [], [], [[1, 'Blaze', 1], [1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and s.has_any(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has_all(("Bash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and s.has("Grapple", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.Central", player), lambda s: s.has("Double Jump", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TrialActivation", player), lambda s: s.has_all(("Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has_any(("Sword", "Double Jump", "Bash"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has_any(("Bash", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Hammer", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [['Flash', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[1, 'Sentry', 5]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [[1, 'Shuriken', 3]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has_all(("Bash", "Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [30, 30], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and s.has("Glide", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[2, 45]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_any(("Launch", "Bash"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 20]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [], [[2, 5], [0, [[1, 'Combat']], ['Combat.Ranged']]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("Dash", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat'], [1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has_all(("Dash", "Grapple"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEC", player), lambda s: cost_all(s, player, options, "PoolsApproach.MillPath", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Grapple", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Spear', 1], ['Blaze', 1]], [[32, 'Combat'], [8, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [240], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Bash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [200], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Grapple", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple", "Sword"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [60], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [80], [['Blaze', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [100], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple", "Double Jump"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [200], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Grapple", player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Spear', 1]], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Grenade', 1], ['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [20], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_any(("Double Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [40], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [60], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and s.has_any(("Glide", "Double Jump", "Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Bash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [], [], [[2, 100]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Triple Jump", "Sticky"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.MillPathHC", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has_any(("Double Jump", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Grenade', 1]], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [], [['Grenade', 1]], [[20, 'Wall']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MarshBreakableWall_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.MarshBreakableWall", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_C.PoolsApproach.OnTopOfWheel", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.WheelFreed", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Grenade', 2]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Flap", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Flap", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 220]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has_all(("Flap", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Clean Water", player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Bash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [300], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathEC", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash", "Grapple"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Bash"), player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [['Spear', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Sword", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Double Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Flash', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Grapple", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Bash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [40], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Water Dash", "Bash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Grapple", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [60], [['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [80], [], [], [[1, 'Shuriken', 2], [1, 'Blaze', 4], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and s.has_any(("Double Jump", "Sword"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Bash", "Grapple"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [180], [], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump", "Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("Water Dash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 2]], [], [[1, 'Spear', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Blaze', 3], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 2]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Bash", "Dash"), player) and s.has("PoolsApproach.WheelFreed", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has("Water Dash", player) and s.has("PoolsApproach.UnderwaterWallBroken", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPath", player), lambda s: s.has_all(("Clean Water", "Grapple", "Dash"), player) and s.has("PoolsApproach.UnderwaterWallBroken", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.EntryLever", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowEntryLeverBubble", player), lambda s: s.has_all(("Sword", "Flap"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.WheelFreed", player), lambda s: cost_all(s, player, options, "EastPools.LeverRoom", [60], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.WheelFreed", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [40], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.TwoCrushersEX", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.TwoCrushersEX", player), lambda s: cost_all(s, player, options, "EastPools.LeverRoom", [], [], [], [[2, 200]], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.TwoCrushersEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Grapple", "Flap"), player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.RightOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BubbleCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.MarshPathCurrentEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Grenade', 1]], [], [[2, 140]], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: cost_all(s, player, options, "EastPools.LeverRoom", [240], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_PoolsApproach.OnTopOfWheel", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.LeverRoom", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Sword", "Bash"), player) and s.has_any(("Hammer", "Grapple", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Double Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.BehindEntryDoor_to_EastPools.LeverRoom", player), lambda s: s.has("EastPools.EntryLever", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.TokkBubble", [65], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [60], [], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubbleFree", player), lambda s: s.has("EastPools.TokkBubblePurpleWall", player) and cost_all(s, player, options, "EastPools.TokkBubble", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastPools.TokkBubble", [125], [], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.TokkBubblePurpleWall", player), lambda s: cost_all(s, player, options, "EastPools.TokkBubble", [130], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.LowerWaterDrained", player), lambda s: True, "or")
    add_rule(world.get_entrance("EastPools.TokkBubble_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: s.has_any(("Glide", "Sword", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [10], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Spear', 1]], [], [[1, 'Blaze', 2], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.LowerWaterDrained", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Grenade', 1]], [], [[1, 'Blaze', 2], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.AboveDoorOre", player), lambda s: s.has_all(("Sword", "Bash"), player), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastPools.TPArea", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.ArenaWall", player), lambda s: s.has("Clean Water", player) and s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.ArenaWall", player), lambda s: s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [300], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [240], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.UltraBashShard", player), lambda s: s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [220], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.Teleporter_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.Teleporter", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.FishingPool", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and cost_all(s, player, options, "EastPools.FishingPool", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [], [], [[1, 'Grenade', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.PurpleWallHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [240], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.UltraBashShard", player), lambda s: s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [220], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Launch", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.Teleporter", player), lambda s: s.has("Bash", player) and s.has("EastPools.LowerWaterDrained", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [60], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: s.has_any(("Launch", "Grapple", "Glide", "Double Jump", "Dash", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.TPArea", player), lambda s: cost_all(s, player, options, "EastPools.NextToLupoOre", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.NextToLupoOre_to_EastPools.WaterdashArena", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.NextToLupoOre", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Clean Water", "Bash", "Dash"), player) and s.has("EastPools.LowerWaterDrained", player), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.BehindCrusherEX", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.LupoArea", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.CentralRoom", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.LupoArea", [240], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LupoArea_to_EastPools.CentralRoom", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.LupoPurpleFloor", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.LupoArea", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightArenas", player), lambda s: s.has("Clean Water", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has("Combat.Aerial", player) and s.has_any(("Launch", "Dash"), player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [20, 'Combat'], [20, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightArenas", player), lambda s: s.has("Clean Water", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Ranged", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [], [], [[32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [32, 'Combat'], [40, 'Combat'], [20, 'Combat'], [20, 'Combat']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has_all(("Water Dash", "Hammer"), player) and s.has("EastPools.FightArenas", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.FightRoomHC", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.FightArenas", player) and s.has_any(("Dash", "Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.ArenaWall", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.NextToLupoOre", player), lambda s: s.has("EastPools.ArenaWall", player) and s.has("EastPools.LowerWaterDrained", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: cost_all(s, player, options, "EastPools.WaterdashArena", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.WaterdashArena", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.WaterdashArena_to_EastPools.MissilePuzzle", player), lambda s: s.has("Launch", player) and s.has_any(("Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [200], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoPurpleFloor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [300], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoPurpleFloor", player), lambda s: s.has_all(("Bash", "Water Dash"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [200], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.EnergyHarvestShard", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[2, 220]], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: cost_all(s, player, options, "EastPools.MissilePuzzle", [220], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.BehindCrusherEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Glide"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has_any(("Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Glide"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and s.has_any(("Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.SpiritTrial", player), lambda s: s.has_all(("Clean Water", "Grapple", "Water Dash", "Dash"), player) and s.has("UpperPools.TrialActivation", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.CentralRoom", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: cost_all(s, player, options, "EastPools.MissilePuzzle", [], [], [], [[2, 60]], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.WaterdashArena", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.MissilePuzzle_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.MissilePuzzle", [80], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomPurpleWall", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has_all(("Clean Water", "Sword"), player) and s.has("Deflector", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.CentralRoomBubbleFree", player), lambda s: s.has("Clean Water", player) and s.has("Fracture", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Bash", player) and s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and cost_all(s, player, options, "EastPools.CentralRoom", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [120], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "EastPools.CentralRoom", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Launch"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "EastPools.CentralRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.MissilePuzzle", player), lambda s: s.has("Water Dash", player) and s.has("EastPools.CentralRoomPurpleWall", player) and cost_all(s, player, options, "EastPools.CentralRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.LupoArea", player), lambda s: s.has("EastPools.CentralRoomPurpleWall", player) and s.has("EastPools.LupoPurpleFloor", player) and cost_all(s, player, options, "EastPools.CentralRoom", [180], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.UpperLeftKS", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.LowerKS", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [140], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Dash", player) and s.has("UpperPools.KeystoneRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Flap", "Grapple"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [], [], [[1, 'Shuriken', 3]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("UpperPools.KeystoneRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperLeftKS", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperMidKS", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.UpperRightKS", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [20], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Water Dash", "Clean Water"), player) and cost_all(s, player, options, "UpperPools.KeystoneRoom", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoom_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Dash", "Hammer", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.TrialActivation", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperMidKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.UpperLeftKS", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoomEntrance", [], [], [], [[1, 'Bow', 1], [1, 'Grenade', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.RoofEX", player), lambda s: s.has("Dash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Flap", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoomEntrance_to_UpperPools.AboveTree", player), lambda s: s.has("Dash", player) and s.has("UpperPools.TreeRoomLeftBubbleFree", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomLeftBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: cost_all(s, player, options, "UpperPools.TreeRoom", [], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomRightBubbleFree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.ButtonDoorAboveTree", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.SwimDashCurrentEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.TreeRoomEntrance", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("UpperPools.ButtonDoorAboveTree", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Grenade', 1], ['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.AboveTree_to_UpperPools.RoofEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperPools.AboveTree", [], [], [[1, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Grapple", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Launch", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Sword"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [100], [], [], [[1, 'Spear', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Launch", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [120], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Launch"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and s.has_any(("Double Jump", "Dash", "Glide", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Grapple"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [60], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has_all(("Grapple", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Grapple", "Bash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [80], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Hammer", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [], [], [[1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Bash", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleExit", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [20], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainRoomPurpleWall", player), lambda s: s.has_all(("Clean Water", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Clean Water"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Clean Water"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [60], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [60], [['Grenade', 1]], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("Double Jump", player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Clean Water", player) and s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Bash", "Launch", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Clean Water", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [], [], [], [[1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and s.has_any(("Double Jump", "Dash", "Glide", "Launch", "Sword", "Hammer"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [20], [], [], [[1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleExit_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and s.has("UpperPools.UpperWaterDrained", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleExit", [20, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has_any(("Sword", "Hammer", "Double Jump", "Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [], [], [[1, 'Sentry', 2], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [25], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Grenade', 1]], [], [[2, 80]], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.LeftBubblesEX", player), lambda s: cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.LeftBubblesEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Bash"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has("Bash", player) and s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [120, 140], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Water Dash", "Sword"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [], [], [[2, 120]], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Clean Water", player) and s.has("Launch", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WestPools.Teleporter", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Dash", "Hammer"), player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has_all(("Water Dash", "Dash", "Hammer"), player) and cost_all(s, player, options, "WestPools.Teleporter", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.TpEX", player), lambda s: cost_all(s, player, options, "WestPools.Teleporter", [], [], [], [[1, 'Sentry', 2], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowOre", player), lambda s: s.has_all(("Clean Water", "Burrow"), player) and s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.BurrowOre", player), lambda s: s.has_all(("Water Dash", "Burrow"), player) and s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.Teleporter", [80, 60, 80], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Bash", player) and s.has("WestPools.ForestsStrength", player) and cost_all(s, player, options, "WestPools.Teleporter", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Burrow", player) and s.has_any(("Double Jump", "Launch"), player) and cost_all(s, player, options, "WestPools.Teleporter", [200], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.Teleporter_to_EastPools.CentralRoom", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.Teleporter", player), lambda s: s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.EscapeRevisitEX", player), lambda s: cost_all(s, player, options, "WestPools.RightKwolokPlatform", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.EscapeRevisitEX", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("WestPools.ForestsStrength", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and s.has_any(("Clean Water", "Double Jump", "Dash", "Glide", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [100], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WestPools.RightKwolokPlatform", [], [], [[20, 'Wall']], [[1, 'Shuriken', 0], [1, 'Grenade', 0], [1, 'Bow', 0]], 5), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "KwolokEscape", [160], [], [], [], 5), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "KwolokEscape", [], [], [], [[2, 160]], 5), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and s.has("Clean Water", player) and cost_all(s, player, options, "KwolokEscape", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("KwolokEscape_to_KwolokFight", player), lambda s: s.has_all(("Water Dash", "Bash", "Double Jump"), player) and cost_all(s, player, options, "KwolokEscape", [], [['Grenade', 1]], [], [[2, 100]], 5), "or")
    add_rule(world.get_entrance("KwolokFight_to_WestPools.ForestsStrength", player), lambda s: cost_all(s, player, options, "KwolokFight", [], [], [[250, 'Boss']], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Sentry', 3], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_LowerWastes.SunsetView", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 4]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.WestTP", player), lambda s: cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerWastes.Shovel_to_LowerWastes.SunsetView", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.MuncherTunnel_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherTunnel", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.SandPotEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.SandPot", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1], [2, 30]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has_all(("Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SandPot_to_LowerWastes.WoodenBridge", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [], [], [[1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.MuncherPitEX", player), lambda s: s.has("Dash", player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: cost_all(s, player, options, "LowerWastes.WoodenBridge", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.SandPot", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerWastes.WoodenBridge", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [[60, 'Combat'], [32, 'Combat']], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.BeforeMinesEntrance_to_LowerWastes.MinesEntranceEnemyPaths", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.BeforeMinesEntrance", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntranceEnemyPaths_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Bash", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "LowerWastes.MinesEntranceEnemyPaths", [], [], [[60, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BottomRightEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.MinesEntrance_to_LowerWastes.BeforeMinesEntrance", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MinesEntrance", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.SandPlatformLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Dash", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Sword"), player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has_all(("Grapple", "Glide"), player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.MuncherClimbEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Spear', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.LastStandArea", player), lambda s: s.has("Burrow", player) and s.has("LowerWastes.SandPlatformLever", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 2], [2, 30]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.MuncherClimb_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.MuncherClimb", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.LastStandArea_to_LowerWastes.LastStandEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.ThirstyGorlek", player), lambda s: s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.UpperPath", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [[1, 'Shuriken', 2], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [60], [], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and can_buy_map(s, player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Spear', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("Triple Jump", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [], [], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.SkeetoHive", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerWastes.UpperPath_to_LowerWastes.UpperPathHiddenEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.EastTP", [60], [], [[20, 'Wall']], [[1, 'Spear', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has_all(("Dash", "Sword"), player) and cost_all(s, player, options, "LowerWastes.EastTP", [30], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and s.has("Hammer", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.EastTP_to_LowerWastes.EastTPOre", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerWastes.EastTP", [], [], [[20, 'Wall']], [[1, 'Spear', 2]], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Burrow", player) and can_keystones(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Double Jump", player) and can_keystones(s, player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Double Jump", player) and can_keystones(s, player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [], [], [[2, 30]], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_keystones(s, player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Double Jump", player) and can_keystones(s, player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.LowerKS", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [36], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has_any(("Hammer", "Sword"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [6], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has_all(("Double Jump", "Dash", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.MissilePuzzleLeft", player), lambda s: s.has("Burrow", player) and s.has("UpperWastes.KeystoneDoor", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Burrow", "Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_C.UpperWastes.MissilePuzzleMiddle", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.LeverDoor", player), lambda s: s.has("Burrow", player) and s.has_any(("Dash", "Launch"), player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleMiddle_to_UpperWastes.PurpleWallEX", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleRight_to_UpperWastes.SpinLasers", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has_all(("Dash", "Burrow"), player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Burrow", player) and s.has("Sword", player), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperWastes.SpinLasers", [], [], [], [[1, 'Shuriken', 3]], 5), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.MissilePuzzleRight", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1], ['Shuriken', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has_any(("Glide", "Sword"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 1]], [], [[1, 'Shuriken', 1], [1, 'Sentry', 2], [2, 30]], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [], [['Grenade', 2]], [], [[1, 'Spear', 2], [1, 'Shuriken', 2], [1, 'Flash', 2], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash"), player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Dash"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Burrow", "Double Jump", "Hammer"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.OutsideRuins_to_UpperWastes.NorthTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WindtornRuins.UpperRuinsDoor_to_WindtornRuins.RuinsLever", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.UpperRuinsDoor", [], [], [], [[1, 'Sentry', 2], [1, 'Grenade', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.BrokenMural_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.RuinsTP", player), lambda s: s.has("Burrow", player), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.LowerRuins", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Sword", player) and s.has_any(("Burrow", "WindtornRuins.HeartBarrier"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.RuinsTP_to_WindtornRuins.BrokenMural", player), lambda s: s.has_all(("Burrow", "Hammer"), player) and cost_all(s, player, options, "WindtornRuins.RuinsTP", [], [], [], [[1, 'Spear', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Dash", "Hammer"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Grapple"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [], [], [], [[1, 'Blaze', 5], [1, 'Flash', 5]], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Dash"), player) and s.has("WindtornRuins.HeartBarrier", player) and cost_all(s, player, options, "WindtornRuins.Escape", [40], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.LowerRuins_to_WindtornRuins.FallenPillar", player), lambda s: s.has("WindtornRuins.HeartBarrier", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Sword", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.ElevatorFightCompleted", player), lambda s: s.has("Glide", player) and s.has("Combat.Dangerous", player) and s.has("Combat.Shielded", player) and cost_all(s, player, options, "WeepingRidge.Bottom", [], [], [[80, 'Combat'], [80, 'Combat'], [50, 'Combat'], [50, 'Combat']], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.Bottom_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has_any(("Glide", "Sword"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [40], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has("Dash", player) and s.has_any(("Hammer", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.AboveTree", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player) and s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Grenade', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Bottom", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [], [], [[1, 'Shuriken', 3], [1, 'Sentry', 3]], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.PortalEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.PortalEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40, 80], [], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "Hammer"), player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Double Jump", "Hammer"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.Ore", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.LaunchArea", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Launch", "Bash"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and s.has_any(("Dash", "WillowsEnd.PortalShortcut"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [[1, 'Grenade', 1], [2, 40]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has("Dash", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [], [], [[1, 'Grenade', 1], [2, 40]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.BoulderHeartPath", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Bash", "Glide", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Sword", "Double Jump", "Bash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WeepingRidge.LaunchArea", player), lambda s: s.has("WeepingRidge.ElevatorFightCompleted", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and s.has_any(("Sword", "Hammer"), player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeartMidPoint", [20], [], [], [[1, 'Shuriken', 1], [1, 'Blaze', 3], [1, 'Sentry', 2]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Spear', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.PoisonfallHC", player), lambda s: s.has("Hammer", player) and s.has("WillowsEnd.GrappleWheelsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Glide", player) and s.has("WillowsEnd.GrappleWheelsHeart", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeart_to_WillowsEnd.Entry", player), lambda s: s.has("Dash", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.GrappleHeart", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.EntryEX", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("WillowsEnd.PortalShortcut", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Grenade', 1]], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [40], [], [], [[1, 'Spear', 2], [1, 'Blaze', 2], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.InnerTP", player), lambda s: s.has_all(("Grapple", "Double Jump", "Bash"), player) and s.has("Triple Jump", player) and s.has_any(("Glide", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.Entry", player), lambda s: s.has_any(("Bash", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.InnerTP", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Bash", "Dash"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.AboveInnerTP_to_WillowsEnd.East", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("Dash", player) and s.has_any(("Bash", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_E.WillowsEnd.RedirectHeartPath", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectEX", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "WillowsEnd.RedirectHeartPuzzle", [160], [['Grenade', 1]], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPuzzle_to_WillowsEnd.RedirectHeartPath", player), lambda s: s.has_all(("Double Jump", "Sword"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: cost_all(s, player, options, "WillowsEnd.Upper", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall'], [60, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Double Jump", player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "WillowsEnd.West", [], [], [[10, 'Wall'], [60, 'Combat']], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideHeartPath_to_WillowsEnd.GlideRooms", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GlideRooms_to_WillowsEnd.WindSpinOre", player), lambda s: s.has_all(("Launch", "Double Jump"), player) and cost_all(s, player, options, "WillowsEnd.GlideRooms", [], [], [], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperLeftEX", player), lambda s: s.has_all(("Double Jump", "Grapple", "Bash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [], [], [], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has_all(("Double Jump", "Grapple", "Bash"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartPath_to_WillowsEnd.UpperHeartCheckpoint", player), lambda s: s.has("Bash", player) and s.has("WillowsEnd.SpinPortalsHeart", player) and cost_all(s, player, options, "WillowsEnd.UpperHeartPath", [], [['Grenade', 1], ['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.UpperHeartCheckpoint_to_WillowsEnd.UpperRightEX", player), lambda s: s.has("Double Jump", player), "or")


def set_unsafe_glitched_rules(world, player, options):
    """Unsafe rules with glitches."""
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Sentry', 2]], [], [[1, 'Sentry', 1], [1, 'Shuriken', 1], [2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has_all(("Grapple", "Grenade"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "MarshSpawn.Main", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.GrappleHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Main_to_MarshSpawn.BridgeEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BrokenBridge_to_MarshSpawn.BashEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.LeverEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.CaveEntrance", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.CaveEntrance_to_MarshSpawn.BrokenBridge", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.TokkBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.TokkBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.CaveKS", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.Cave_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [10], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [20], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BurrowFightArena_to_MarshSpawn.LeftSpawnSignpost", player), lambda s: s.has_all(("Burrow", "Clean Water"), player) and cost_all(s, player, options, "MarshSpawn.BurrowFightArena", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.CaveOre", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsBurrowsSignpost_to_MarshSpawn.BeforeBurrows", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "MarshSpawn.PoolsBurrowsSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsApproachLedgeEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.BurrowsEntry", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshSpawn.BeforeBurrows", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.BeforeBurrows_to_MarshSpawn.PoolsBurrowsSignpost", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Triple Jump", "Bash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowOre", player), lambda s: s.has_all(("Burrow", "Water Dash", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [6], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.PoolsPath", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Clean Water", "Flash"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.LeftSpawnSignpost_to_MarshSpawn.BurrowFightArena", player), lambda s: s.has_all(("Burrow", "Water Dash", "Flash"), player) and cost_all(s, player, options, "MarshSpawn.LeftSpawnSignpost", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: cost_all(s, player, options, "MarshSpawn.PoolsPath", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.PoolsPath_to_MarshSpawn.PoolsPathEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.RegenDoor_to_MarshSpawn.HowlApproach", player), lambda s: cost_all(s, player, options, "MarshSpawn.RegenDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: cost_all(s, player, options, "MarshSpawn.HowlApproach", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.HowlApproach_to_MarshSpawn.RegenDoor", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Blaze', 1]], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [], [[10, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.RecklessShard", player), lambda s: s.has("MarshSpawn.HowlBurnt", player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.HowlApproach", player), lambda s: s.has("Grenade", player) and s.has("MarshSpawn.HowlBurnt", player), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("HowlsDen.RainLifted", player) and cost_all(s, player, options, "MarshSpawn.MokkTheBrave", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.MokkTheBrave_to_MarshSpawn.AboveHowlArena", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: cost_all(s, player, options, "MarshSpawn.AboveHowlArena", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshSpawn.AboveHowlArena_to_MarshSpawn.FangPlatform", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: s.has("Grenade", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshSpawn.FangPlatform_to_MarshSpawn.FangEC", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshSpawn.FangPlatform", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveBoneBridge", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveBoneBridge", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_MarshSpawn.HowlsDenEntrance", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.AboveBoneBridge_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveBoneBridge", [], [], [[100.0, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.UpperLoopEntrance_to_HowlsDen.UpperLoopExit", player), lambda s: s.has("HowlsDen.UpperLoopEntranceBarrier", player) and cost_all(s, player, options, "HowlsDen.UpperLoopEntrance", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveDoorKS", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.UpperLoopEntrance", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump"), player) and cost_all(s, player, options, "HowlsDen.BoneBridge", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.BoneBridge_to_HowlsDen.AboveBoneBridge", player), lambda s: s.has_all(("Bash", "Grapple", "Grenade"), player) and s.has("HowlsDen.RainLifted", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.BoneBridgeDoor", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [10], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: cost_all(s, player, options, "HowlsDen.OutsideSecretRoom", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.OutsideSecretRoom_to_HowlsDen.MidwayBottomLoop", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.SecretRoom_to_HowlsDen.LeftSecretRoom", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: cost_all(s, player, options, "HowlsDen.LeftSecretRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.LeftSecretRoom_to_HowlsDen.LeftHC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBarrier", player), lambda s: cost_all(s, player, options, "HowlsDen.AboveTeleporter", [], [], [[100.0, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("HowlsDen.AboveTeleporter_to_HowlsDen.BoneBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.LaserKS", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: cost_all(s, player, options, "HowlsDen.Teleporter", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("HowlsDen.Teleporter_to_HowlsDen.AboveTeleporter", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpApproach_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpApproach", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeLedge_to_HowlsDen.DoubleJumpEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_MidnightBurrows.HowlsDenShortcut", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [], [[20, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: cost_all(s, player, options, "HowlsDen.DoubleJumpTreeArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("HowlsDen.DoubleJumpTreeArea_to_HowlsDen.DoubleJumpTreeLedge", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.ToOpherBarrier", player), lambda s: s.has("Hammer", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshSpawn.ToOpherBarrier", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("SwordJump", player) and cost_all(s, player, options, "MarshPastOpher.MillView", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.MillView_to_MarshPastOpher.OpherSkipBranch", player), lambda s: cost_all(s, player, options, "MarshPastOpher.MillView", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("HammerJump", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.OpherSkipBranch_to_MarshPastOpher.PoolsPathEast", player), lambda s: cost_all(s, player, options, "MarshPastOpher.OpherSkipBranch", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.UnderTrunk_to_MarshPastOpher.TrunkWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.UnderTrunk", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.TrialRightEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: cost_all(s, player, options, "MarshPastOpher.TrialArea", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.UnderTrunk", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.TrialArea_to_MarshPastOpher.BowPath", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowPath_to_MarshPastOpher.MillView", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.BowArea", player), lambda s: cost_all(s, player, options, "MarshPastOpher.BowApproach", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Glide", player) and s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowApproach_to_MarshPastOpher.OpherSkipBranch", player), lambda s: s.has("Double Jump", player) and s.has("WaveDash", player) and s.has_any(("Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.BowArea_to_MarshPastOpher.BowApproach", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathEast_to_MarshPastOpher.CeilingEX", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathEast", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Blaze', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathEC", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathMiddle_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathMiddle", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathOneWayWall_to_MarshPastOpher.PoolsPathWest", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathOneWayWall", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathBellowOneWayWall_to_MarshPastOpher.PoolsPathEast", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathBellowOneWayWall", [], [['Spear', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathOneWayWall", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: True, "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Clean Water", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("MarshPastOpher.PoolsPathWest_to_MarshPastOpher.PoolsPathBellowOneWayWall", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "MarshPastOpher.PoolsPathWest", [], [['Sentry', 1]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("MidnightBurrows.PortalRoom_to_MidnightBurrows.BelowUpperKS", player), lambda s: s.has("Double Jump", player) and s.has("MidnightBurrows.Lever", player) and cost_all(s, player, options, "MidnightBurrows.PortalRoom", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Glide", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.PurpleDoorOpen", player), lambda s: s.has("Grenade", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.Entrance", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.Entrance_to_WestHollow.InFrontPurpleDoorEnemyPaths", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: cost_all(s, player, options, "WestHollow.MokiByTwillen", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.MokiByTwillen_to_WestHollow.UpperDrainLeverPulled", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.InFrontPurpleDoor_to_WestHollow.MokiByTwillen", player), lambda s: cost_all(s, player, options, "WestHollow.InFrontPurpleDoor", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.RockPuzzle", player), lambda s: s.has("Flash", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [40], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [60], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainMiddle", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Grenade", player) and s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainMiddle_to_WestHollow.Entrance", player), lambda s: s.has("Water Dash", player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_E.WestHollow.RockPuzzle", player), lambda s: s.has("Sword", player) and s.has("Magnet", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("Flash", player) and s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player), "or")
    add_rule(world.get_entrance("WestHollow.RockPuzzle_to_WestHollow.FarLeftRoom", player), lambda s: s.has("WestHollow.RockPuzzleSolved", player) and s.has_any(("WestHollow.UpperDrainLeverPulled", "WestHollow.FullyDrained"), player) and cost_all(s, player, options, "WestHollow.RockPuzzle", [], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FullyDrained", player), lambda s: s.has("Bash", player) and s.has("WestHollow.UpperDrainLeverPulled", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [['Sentry', 1]], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("HammerJump", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [], [], [], [[2, 50]], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has("Water Dash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.FarLeftRoom_to_WestHollow.FarLeftEX", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and cost_all(s, player, options, "WestHollow.FarLeftRoom", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.UpperTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.SubmergedPlatform", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.SubmergedPlatform_to_WestHollow.RockPuzzle", player), lambda s: s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Glide", player) and s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("WestHollow.LowerTongueExtended", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("Grenade", player) and s.has("WestHollow.FullyDrained", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has("WestHollow.FullyDrained", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.AboveJumppad_to_WestHollow.SubmergedPlatform", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.AboveJumppad", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Double Jump", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Dash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Flash", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Glide", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: s.has("Grenade", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("WestHollow.FullyDrained", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.TrialApproach", player), lambda s: s.has("Flash", player) and s.has("WestHollow.FullyDrained", player), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Blaze', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Grenade"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Bow', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has("Water Dash", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Blaze', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.HollowDrainMiddle", player), lambda s: s.has_all(("Water Dash", "Flash"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Dash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [90], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has("Water Dash", player) and s.has("HammerJump", player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Water Dash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.HollowDrainLower_to_WestHollow.RockPuzzle", player), lambda s: s.has_all(("Water Dash", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WestHollow.HollowDrainLower", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: cost_all(s, player, options, "WestHollow.TrialApproach", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.TrialApproach_to_WestHollow.TrialStart", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.BelowLupoEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.PolesPound", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.PolesPound", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: cost_all(s, player, options, "WestHollow.PolesPound", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.PolesPound_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashApproach_to_WestHollow.HollowDrainLower", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashArea", player), lambda s: cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Blaze', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: cost_all(s, player, options, "WestHollow.DashCrushers", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashCrushers_to_WestHollow.DashRoomTopRight", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.DashRightEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: True, "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: cost_all(s, player, options, "WestHollow.DashRoomTopRight", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestHollow.DashRoomTopRight_to_WestHollow.AboveDashSemisolid", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("Double Jump", player) and s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.Teleporter_to_EastHollow.VoiceDoorPlatform", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.HornBeetleFightEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.VoiceDoorPlatform_to_EastHollow.AfterBeetleFight", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.MapMoki_to_EastHollow.OutsideGlades", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.GromsWall", player), lambda s: cost_all(s, player, options, "EastHollow.OutsideGlades", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.OutsideGlades_to_GladesTown.GromsWall", player), lambda s: cost_all(s, player, options, "EastHollow.OutsideGlades", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SpikeLanternEX", player), lambda s: cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.SecretRoofEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.MortarEX", player), lambda s: cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Teleporter", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AfterBeetleFight_to_EastHollow.Kwolok", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "EastHollow.AfterBeetleFight", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Sentry', 1]], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.DepthsLever", player), lambda s: s.has("Combat.Dangerous", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Grenade', 1]], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.AboveBash_to_EastHollow.BashEC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "EastHollow.AboveBash", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.BashTreeCheckpoint_to_EastHollow.BashEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "EastHollow.BashTreeCheckpoint", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_EastHollow.SilentSwimEC", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "EastHollow.Kwolok", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Clean Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastHollow.Kwolok_to_WoodsEntry.ShriekMeet", player), lambda s: s.has_all(("Water Dash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "EastHollow.Kwolok", [60, 110], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.ArcingShard", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player) and s.has("Clean Water", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.LupoSwimLeftEX", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.ClearThorns", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [], [], [[2, 100]], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.UpperWest", player), lambda s: cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.BelowBountyShard", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.Teleporter", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_GladesTown.AboveOpher", player), lambda s: s.has_all(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("GladesTown.Teleporter_to_TuleyShop", player), lambda s: s.has("Glide", player) and s.has("GladesTown.TuleySpawned", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("GladesTown.TwillenHome_to_GladesTown.Teleporter", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: cost_all(s, player, options, "GladesTown.West", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("GladesTown.BuildHuts", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_GladesTown.MotayHut", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.West", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.West_to_WestGlades.PastTown", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "GladesTown.West", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("Grenade", player) and s.has("TuleyShop.StickyGrass", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperOre", player), lambda s: s.has_all(("Grapple", "Bash", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and s.has("TuleyShop.BlueMoon", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.BuildHuts", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("GladesTown.MotayHut_to_GladesTown.UpperWest", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Dash"), player) and s.has("GladesTown.BuildHuts", player) and cost_all(s, player, options, "GladesTown.MotayHut", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.BraveMokiHutEX", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.OnwardsAndUpwards", player), "or")
    add_rule(world.get_entrance("GladesTown.UpperWest_to_GladesTown.AboveGromHC", player), lambda s: cost_all(s, player, options, "GladesTown.UpperWest", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has_all(("Flash", "Grenade"), player) and s.has("GladesTown.CaveEntrance", player), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2], ['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.AcornMoki_to_GladesTown.AcornQI", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.CaveEntrance", player) and cost_all(s, player, options, "GladesTown.AcornMoki", [], [['Bow', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("GladesTown.BelowBountyShard_to_GladesTown.BountyShard", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.UpdraftCeilingEX", player), lambda s: s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.LeftAboveCoals_to_GladesTown.BelowBountyShard", player), lambda s: s.has("TuleyShop.SpringPlants", player) and s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("GladesTown.AboveOpher_to_GladesTown.PlayfulMoki", player), lambda s: s.has("Grenade", player) and s.has("TuleyShop.SpringPlants", player), "or")
    add_rule(world.get_entrance("GladesTown.PlayfulMoki_to_GladesTown.HoleHut", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_GladesTown.HoleHutEntrance", player), lambda s: s.has("Grenade", player) and s.has("GladesTown.RoofsOverHeads", player), "or")
    add_rule(world.get_entrance("GladesTown.HoleHut_to_LowerReach.VeralHome", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Glide", player) and s.has("Hammer", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.GrappleEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Bash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.AbovePlantEX", player), lambda s: s.has_all(("Glide", "Double Jump"), player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [], [[40, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_WestGlades.Center", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", [20], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.PastTown_to_GladesTown.West", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.PastTown", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Bash", "Glide", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.LowerPool", [], [], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.LeftOre", player), lambda s: cost_all(s, player, options, "WestGlades.LowerPool", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.LowerPool_to_WestGlades.Center", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WestGlades.LowerPool", [20], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.LeftOre", player), lambda s: s.has_all(("Glide", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "WestGlades.Center", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Center_to_WestGlades.RightOre", player), lambda s: cost_all(s, player, options, "WestGlades.Center", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.RightOre", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestGlades.Upper_to_WestGlades.MillApproach", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.SwimOre", player), lambda s: s.has_all(("Clean Water", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Grapple", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [['Blaze', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: cost_all(s, player, options, "WestGlades.MillApproach", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.ShrineArea", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_WestGlades.Upper", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "WestGlades.MillApproach", [], [], [], [[1, 'Sentry', 1], [1, 'Flash', 1], [1, 'Blaze', 1], [1, 'Shuriken', 1]], 5), "or")
    add_rule(world.get_entrance("WestGlades.MillApproach_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Grenade", "Hammer"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Grenade", player) and s.has_any(("Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestGlades.ShrineArea_to_WestGlades.ShrineHC", player), lambda s: s.has_all(("Hammer", "Double Jump"), player) and cost_all(s, player, options, "WestGlades.ShrineArea", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.EntranceRoofEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [], [['Sentry', 2]], [], [[2, 15]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has("Glide", player) and s.has("OuterWellspring.FallingWheel", player) and cost_all(s, player, options, "OuterWellspring.EntranceDoor", [10], [], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EntranceDoor_to_OuterWellspring.AboveEntranceDoor", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestWallBroken", player), lambda s: cost_all(s, player, options, "OuterWellspring.LifeHarvestEntry", [], [], [[125.0, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("GlideHammerJump", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("OuterWellspring.LifeHarvestEntry_to_OuterWellspring.LifeHarvestShard", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has_all(("Clean Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "OuterWellspring.Basement", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and s.has("Clean Water", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.Basement_to_OuterWellspring.EntranceDoor", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("OuterWellspring.EntranceDoorOpen", player) and cost_all(s, player, options, "OuterWellspring.Basement", [], [['Sentry', 1]], [], [[2, 60]], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has("Double Jump", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1], ['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.AboveEntranceDoor_to_OuterWellspring.EastDoor", player), lambda s: s.has_all(("Bash", "Glide", "Dash"), player) and cost_all(s, player, options, "OuterWellspring.AboveEntranceDoor", [], [['Grenade', 1], ['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.WestDoor_to_OuterWellspring.HiddenHC", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "OuterWellspring.WestDoor", [], [['Grenade', 1], ['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.EastDoor_to_OuterWellspring.TrialApproach", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: cost_all(s, player, options, "OuterWellspring.TopDoor", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("OuterWellspring.TopDoor_to_OuterWellspring.UltraGrappleShard", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.EntranceDoor_to_InnerWellspring.ThreeWheelsEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.ThornShardArea_to_InnerWellspring.ThornEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "InnerWellspring.ThornShardArea", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[20, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [15], [], [[20, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("Bash", player) and s.has("InnerWellspring.DrainRoomBottomWheel", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [['Grenade', 2]], [[20, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and s.has("Sword", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[20, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainRoom_to_InnerWellspring.DrainAreaExit", player), lambda s: s.has("InnerWellspring.DrainLever", player) and cost_all(s, player, options, "InnerWellspring.DrainRoom", [], [], [[20, 'Shuriken']], [[1, 'Shuriken', 2]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.DrainAreaEntrance_to_InnerWellspring.DrainAreaEX", player), lambda s: s.has_all(("Clean Water", "Water Dash", "Glide"), player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.DrainLever", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.LeverEC", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.BelowDrainLever_to_InnerWellspring.WestDoor", player), lambda s: cost_all(s, player, options, "InnerWellspring.BelowDrainLever", [15], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.WestDoor_to_InnerWellspring.MiddleDoorsOpen", player), lambda s: cost_all(s, player, options, "InnerWellspring.WestDoor", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.SpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.SpinPuzzle", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.PastSpinPuzzle_to_InnerWellspring.SpinPuzzleSolved", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "InnerWellspring.PastSpinPuzzle", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.BlueMoonSeed", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.AboveTpEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Blaze', 1]], [], [[1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: cost_all(s, player, options, "InnerWellspring.Teleporter", [], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [1, 'Spear', 1], [1, 'Flash', 1]], 5), "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: True, "or")
    add_rule(world.get_entrance("InnerWellspring.Teleporter_to_InnerWellspring.EscapeSequence", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("InnerWellspring.EscapeSequence_to_InnerWellspring.WaterEscape", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsEntry.ShriekMeet_to_EastHollow.Kwolok", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "WoodsEntry.ShriekMeet", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowFourKeystoneRoom_to_WoodsMain.WallOreLedge", player), lambda s: s.has_all(("Double Jump", "['Hammer', 'Sentry']"), player) and cost_all(s, player, options, "WoodsMain.BelowFourKeystoneRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FourKeystoneRoom_to_WoodsMain.UpperKS", player), lambda s: cost_all(s, player, options, "WoodsMain.FourKeystoneRoom", [], [['Sentry', 1]], [[3, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("Double Jump", player) and s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BalloonLure_to_WoodsMain.BelowHiddenOre", player), lambda s: s.has("WoodsMain.BalloonLureBlobDestroyed", player) and cost_all(s, player, options, "WoodsMain.BalloonLure", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.BalloonLureBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [], [[6, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 1], ['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [2, 15]], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: cost_all(s, player, options, "WoodsMain.BelowHiddenOre", [], [['Blaze', 6]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("WoodsMain.BelowHiddenOre_to_WoodsMain.HiddenOre", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WoodsMain.AboveHowl_to_WoodsMain.BeforeLog", player), lambda s: cost_all(s, player, options, "WoodsMain.AboveHowl", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.BeforeLog_to_WoodsMain.OrangeTree", player), lambda s: cost_all(s, player, options, "WoodsMain.BeforeLog", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.Teleporter_to_WoodsMain.LogBlobDestroyed", player), lambda s: cost_all(s, player, options, "WoodsMain.Teleporter", [], [], [[6, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("WoodsMain.FeedingGrounds_to_LowerWastes.WestTP", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.BelowBaurEX", player), lambda s: s.has("Grenade", player) and s.has("LowerReach.BearSneezed", player) and s.has("LowerReach.BearBridgeBroken", player), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: cost_all(s, player, options, "LowerReach.Entry", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Entry_to_LowerReach.AboveEntry", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "LowerReach.Entry", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.Lever", player), lambda s: cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurLowerEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and s.has("Double Jump", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 2]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.AboveEntry_to_LowerReach.AboveBaurUpperEX", player), lambda s: s.has("Dash", player) and s.has("LowerReach.ThawBaurFurnace", player) and cost_all(s, player, options, "LowerReach.AboveEntry", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Triple Jump", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Sentry', 1]], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallOre", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Dash"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Sentry', 1]], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Sentry', 1]], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has("Glide", player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and s.has_any(("Dash", "Double Jump"), player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Sentry', 1]], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Icefall_to_LowerReach.IcefallEX", player), lambda s: s.has_all(("Dash", "Double Jump"), player) and s.has("LowerReach.LeftFurnace", player) and s.has("Combat.Aerial", player) and cost_all(s, player, options, "LowerReach.Icefall", [], [['Sentry', 1]], [[25, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Central_to_LowerReach.OutsideTPRoom", player), lambda s: s.has("LowerReach.ThawCentralFurnace", player) and cost_all(s, player, options, "LowerReach.Central", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.AboveDoorEX", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.AboveDoorEX", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.TPLeftEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: cost_all(s, player, options, "LowerReach.OutsideTPRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.OutsideTPRoom_to_LowerReach.HiddenOre", player), lambda s: s.has("GlideHammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.BelowLupo_to_LowerReach.BelowLupoEX", player), lambda s: cost_all(s, player, options, "LowerReach.BelowLupo", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindLantern", player), lambda s: s.has_any(("Double Jump", "Bash", "Hammer"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.WindChannel", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [20, 20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.WindHiddenEX", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "LowerReach.WindChannel", [20, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: cost_all(s, player, options, "LowerReach.WindChannel", [20], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.WindChannel_to_LowerReach.SoupMoki", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "LowerReach.WindChannel", [20, 20, 20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: cost_all(s, player, options, "LowerReach.SoupMoki", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SoupMoki_to_LowerReach.EastEnemyPaths", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerReach.East_to_LowerReach.SnowballEnemyPaths", player), lambda s: cost_all(s, player, options, "LowerReach.East", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.TPLantern", player), lambda s: s.has_all(("Double Jump", "Sword"), player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: cost_all(s, player, options, "LowerReach.Snowball", [20], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.Snowball_to_LowerReach.RolledSnowball", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.Snowball", [], [['Sentry', 1]], [], [[1, 'Shuriken', 1], [1, 'Blaze', 1]], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: cost_all(s, player, options, "LowerReach.PastSnowball", [], [['Blaze', 6]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.PastSnowball_to_LowerReach.RoofLeftEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.IceCavern_to_LowerReach.RoofRightEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Grenade', 1], ['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.EastDoorLantern", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "LowerReach.HalfwayIceCavern", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.HalfwayIceCavern_to_LowerReach.IceCavern", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has("LowerReach.EastDoorLantern", player) and s.has_any(("Double Jump", "Glide", "Dash"), player) and cost_all(s, player, options, "LowerReach.SwimmingPool", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.ArenaArea", player), lambda s: s.has("LowerReach.EastDoorLantern", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerReach.SwimmingPool_to_LowerReach.HalfwayIceCavern", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("LowerReach.ArenaArea_to_LowerReach.WindSpinners", player), lambda s: s.has("Flash", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("LowerReach.WindSpinners_to_LowerReach.WispPathCheckpoint", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has_any(("Glide", "Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.WispPathCheckpoint", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.WispPathCheckpoint_to_LowerReach.BridgeWispPath", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerReach.BridgeWispPath_to_LowerReach.SnowEscape", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 3]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.ForestsMemory", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and s.has("Grapple", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 3]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerReach.SnowEscape", [], [['Sentry', 4]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.SnowEscape_to_LowerReach.BearSneezed", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.VeralHome_to_LowerReach.TownEntry", player), lambda s: s.has("Grenade", player) and s.has_any(("Double Jump", "Dash", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has_all(("Grenade", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "LowerReach.TrialStart", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.TrialEX", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerReach.TrialStart_to_LowerReach.ArenaArea", player), lambda s: s.has("Flash", player) and s.has("LowerReach.ArenaBeaten", player), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has("Burrow", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceEX", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has("Burrow", player) and s.has("Glide", player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has("Burrow", player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "['Sword', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.BurrowArea_to_UpperReach.LifeForceShard", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']", "Dash"), player) and cost_all(s, player, options, "UpperReach.BurrowArea", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.LowerKS", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.KeystoneRoom_to_UpperReach.UpperSoup", player), lambda s: cost_all(s, player, options, "UpperReach.KeystoneRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.UpperKS", player), lambda s: s.has("['Sword', 'Sentry']", player) and s.has_any(("Double Jump", "Hammer"), player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupPaths_to_UpperReach.KeystoneSnapPlant", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperReach.UpperSoupPaths", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.UpperSoupFrozenPaths_to_UpperReach.UpperKS", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperReach.UpperSoupFrozenPaths", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperReach.TreeRoomLedge_to_UpperReach.TreeOre", player), lambda s: s.has_any(("Double Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "UpperReach.TreeRoomLedge", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.Entry_to_EastHollow.AboveDepths", player), lambda s: s.has("Double Jump", player) and s.has("EastHollow.DepthsOpen", player) and cost_all(s, player, options, "UpperDepths.Entry", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.FirstFirefly_to_UpperDepths.EntryRoofEX", player), lambda s: s.has("Glide", player) and s.has("Combat.Bat", player) and s.has("Combat.Aerial", player) and s.has("Combat.Ranged", player) and cost_all(s, player, options, "UpperDepths.FirstFirefly", [30], [['Sentry', 1]], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("UpperDepths.SecondKSRoom_to_LowerDepths.East", player), lambda s: cost_all(s, player, options, "UpperDepths.SecondKSRoom", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("MoraEscape_to_MoraSecondPhase", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_H.LowerDepths.West", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("BreakCrystal", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_E.LowerDepths.West", player), lambda s: s.has("Flash", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_any(("Double Jump", "Dash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Shuriken', 2]], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("HammerJump", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Sword", "Clean Water"), player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Sword", player) and cost_all(s, player, options, "LowerDepths.West", [140], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [], [['Blaze', 1]], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Flash", player) and cost_all(s, player, options, "LowerDepths.West", [], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Glide"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and s.has_any(("Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Clean Water", player) and s.has("HammerJump", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has("Clean Water", player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_DepthsShrine", player), lambda s: s.has_all(("Clean Water", "Flash"), player) and s.has_any(("UpperDepths.ForestsEyes", "Flash"), player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Dash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Dash", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", [10], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "LowerDepths.West", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("HammerJump", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.West_to_LowerDepths.Central", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grapple", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("Grenade", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: cost_all(s, player, options, "LowerDepths.Central", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.RaceStartHC", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has_all(("Bash", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_LowerDepths.East", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Glide", player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("DepthsLight", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.Central_to_UpperDepths.LowerConnection", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("Grenade", player) and s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_E.LowerDepths.East", player), lambda s: s.has("BreakCrystal", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("DepthsLight", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Grenade", "Glide"), player) and s.has("DepthsLight", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_any(("Double Jump", "Grapple"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.SpiritSurgeShard", player), lambda s: s.has_all(("Bash", "Grapple", "Grenade"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has_any(("DepthsLight", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Bash", "Grenade"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has_all(("Double Jump", "Grenade"), player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: s.has("Glide", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.LupoMap", player), lambda s: can_buy_map(s, player) and s.has("WaveDash", player), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("Bash", player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has_all(("Bash", "['Hammer', 'Sentry']"), player) and s.has("DepthsLight", player) and cost_all(s, player, options, "LowerDepths.East", [], [['Sentry', 1]], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_UpperDepths.SecondKSRoom", player), lambda s: s.has("DepthsLight", player) and s.has("HammerJump", player) and cost_all(s, player, options, "LowerDepths.East", [], [], [[20, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.East_to_LowerDepths.BeforeTree", player), lambda s: s.has("Bash", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Grenade", player) and s.has("Double Jump", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: cost_all(s, player, options, "LowerDepths.BeforeTree", [], [['Blaze', 1]], [], [[2, 10]], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: cost_all(s, player, options, "LowerDepths.BeforeTree", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("LowerDepths.BeforeTree_to_LowerDepths.TreeArea", player), lambda s: s.has("Bash", player) and s.has_any(("Double Jump", "Dash", "Grapple", "Glide"), player) and cost_all(s, player, options, "LowerDepths.BeforeTree", [], [], [[1, 'Wall']], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.RightEX", player), lambda s: cost_all(s, player, options, "LowerDepths.TreeArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerDepths.TreeArea_to_LowerDepths.BeforeTree", player), lambda s: s.has("Launch", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Clean Water", player) and s.has("SwordJump", player) and cost_all(s, player, options, "PoolsApproach.MillPathCheckpoint", [15], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_WestGlades.MillApproach", player), lambda s: s.has("Clean Water", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPathCheckpoint_to_PoolsApproach.MillPath", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player) and s.has_any(("Dash", "Triple Jump"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and s.has("Combat.Dangerous", player) and s.has_any(("Sword", "Hammer", "Glide"), player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat']], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.MillPath_to_PoolsApproach.MillPathCheckpoint", player), lambda s: s.has_all(("Grenade", "Grapple"), player) and s.has("Combat.Dangerous", player) and cost_all(s, player, options, "PoolsApproach.MillPath", [], [], [[32, 'Combat']], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.UnderwaterWallBroken", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Grenade', 1]], [], [[2, 180]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Glide", player) and s.has_any(("Double Jump", "Sword", "Hammer"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Glide", player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [], [], [[1, 'Spear', 1], [1, 'Shuriken', 1], [1, 'Flash', 1], [1, 'Sentry', 1]], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("SwordJump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.AboveWheelEX", player), lambda s: cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("HammerJump", player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MillPathHC", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("HammerJump", player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("HammerJump", player) and s.has_any(("Dash", "Triple Jump"), player) and cost_all(s, player, options, "PoolsApproach.OnTopOfWheel", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_PoolsApproach.MarshBreakableWall", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("HammerJump", player) and s.has_any(("Grapple", "Glide"), player), "or")
    add_rule(world.get_entrance("PoolsApproach.OnTopOfWheel_to_EastPools.LeverRoom", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("Triple Jump", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "EastPools.LeverRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.LeverRoom_to_EastPools.BelowLeverEX", player), lambda s: cost_all(s, player, options, "EastPools.LeverRoom", [], [['Sentry', 1]], [], [[2, 20]], 5), "or")
    add_rule(world.get_entrance("EastPools.TPArea_to_EastPools.FishingPool", player), lambda s: cost_all(s, player, options, "EastPools.TPArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.FishingPool_to_EastPools.AboveFishingPool", player), lambda s: cost_all(s, player, options, "EastPools.FishingPool", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.AboveFishingPool_to_EastPools.PurpleWallHC", player), lambda s: s.has("Bash", player) and cost_all(s, player, options, "EastPools.AboveFishingPool", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_EastPools.GrassSeed", player), lambda s: cost_all(s, player, options, "EastPools.CentralRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player) and cost_all(s, player, options, "EastPools.CentralRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("Grenade", player) and s.has("EastPools.CentralRoomBubbleFree", player) and s.has_any(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: s.has("EastPools.CentralRoomBubbleFree", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_UpperPools.KeystoneRoomEntrance", player), lambda s: cost_all(s, player, options, "EastPools.CentralRoom", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath", "Double Jump"), player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("EastPools.CentralRoom_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Water Breath"), player) and s.has("SwordJump", player) and cost_all(s, player, options, "EastPools.CentralRoom", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_UpperPools.KeystoneRoomBubbleSpawner", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has_all(("Clean Water", "Double Jump"), player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.Teleporter", player), lambda s: s.has("Clean Water", player) and s.has("SwordJump", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [20], [], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomEntrance_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("Clean Water", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomEntrance", [20, 20, 20], [], [[40, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.KeystoneRoomBubbleSpawner_to_UpperPools.BeforeKeystoneDoor", player), lambda s: s.has_all(("Flap", "['Sword', 'Sentry']"), player) and s.has("UpperPools.KeystoneRoomBubbleFree", player) and cost_all(s, player, options, "UpperPools.KeystoneRoomBubbleSpawner", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Spear', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grapple", "Flash"), player) and s.has("UltraGrapple", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grapple", player) and s.has("UltraGrapple", player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Grenade", "Flash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and s.has_any(("Hammer", "Double Jump", "Dash"), player), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("Grenade", player) and cost_all(s, player, options, "UpperPools.BeforeKeystoneDoor", [], [], [], [[1, 'Shuriken', 1], [2, 20]], 5), "or")
    add_rule(world.get_entrance("UpperPools.BeforeKeystoneDoor_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("UpperPools.TreeRoom_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("UpperPools.ButtonDoorAboveTree", player) and cost_all(s, player, options, "UpperPools.TreeRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.WaterfallEC", player), lambda s: s.has("['Hammer', 'Sentry']", player) and s.has("Grapple", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleEntrance", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleEntrance_to_UpperPools.DrainPuzzleRight", player), lambda s: s.has("Glide", player) and s.has("UpperPools.DrainRoomPurpleWall", player), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Clean Water", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.UpperWaterDrained", player), lambda s: s.has_all(("Water Dash", "Bash", "Glide"), player) and s.has("UpperPools.DrainRoomPurpleWall", player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [60], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.DrainPuzzleRight_to_UpperPools.DrainPuzzleEntrance", player), lambda s: s.has_all(("Bash", "Glide"), player) and cost_all(s, player, options, "UpperPools.DrainPuzzleRight", [], [['Grenade', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Blaze', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.BubbleSpamLever", player), lambda s: True, "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Double Jump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has_all(("Double Jump", "Glide"), player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: cost_all(s, player, options, "UpperPools.RightBubbleSpamRoom", [], [['Blaze', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Flash", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("Grenade", player), "or")
    add_rule(world.get_entrance("UpperPools.RightBubbleSpamRoom_to_UpperPools.FishPoolOre", player), lambda s: s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubblesEX", player), lambda s: s.has_all(("Bash", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [120, 140], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has_all(("Clean Water", "['Sword', 'Sentry']"), player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperPools.LeftBubbleSpamRoom_to_UpperPools.RightBubbleSpamRoom", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "UpperPools.LeftBubbleSpamRoom", [60], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WestPools.LeftKwolokPlatform_to_WestPools.RightKwolokPlatform", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WestPools.RightKwolokPlatform_to_WestPools.LeftKwolokPlatform", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "['Hammer', 'Sentry']", "Double Jump", "Dash", "Hammer"), player) and s.has("WindtornRuins.Seir", player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has_all(("Burrow", "Double Jump"), player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.WestTP_to_WeepingRidge.Bottom", player), lambda s: s.has("Burrow", player) and s.has("WindtornRuins.Seir", player) and s.has_any(("Dash", "Glide"), player) and cost_all(s, player, options, "LowerWastes.WestTP", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: cost_all(s, player, options, "LowerWastes.SunsetView", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SunsetView_to_LowerWastes.Shovel", player), lambda s: s.has_all(("Grenade", "Double Jump"), player), "or")
    add_rule(world.get_entrance("LowerWastes.WoodenBridge_to_LowerWastes.LeverArea", player), lambda s: s.has("Glide", player), "or")
    add_rule(world.get_entrance("LowerWastes.LeverArea_to_LowerWastes.LastStandArea", player), lambda s: cost_all(s, player, options, "LowerWastes.LeverArea", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.SkeetoHive_to_LowerWastes.MuncherClimb", player), lambda s: s.has_all(("Double Jump", "Glide"), player) and cost_all(s, player, options, "LowerWastes.SkeetoHive", [30], [], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: can_buy_map(s, player) and cost_all(s, player, options, "LowerWastes.ThirstyGorlek", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("LowerWastes.ThirstyGorlek_to_LowerWastes.LupoMap", player), lambda s: s.has("Grenade", player) and can_buy_map(s, player), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has("Bash", player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KeystoneDoor", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and can_keystones(s, player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.TurmoilShard", player), lambda s: s.has_all(("Burrow", "Double Jump", "Bash"), player) and cost_all(s, player, options, "UpperWastes.KeystoneRoom", [30], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.KeystoneRoom_to_UpperWastes.KSDoorEX", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("UpperWastes.MissilePuzzleLeft_to_UpperWastes.LedgeEC", player), lambda s: cost_all(s, player, options, "UpperWastes.MissilePuzzleLeft", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.SpinLasers_to_UpperWastes.RoofEX", player), lambda s: cost_all(s, player, options, "UpperWastes.SpinLasers", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.FlowersSeed", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("UpperWastes.NorthTP_to_UpperWastes.OutsideRuins", player), lambda s: s.has_all(("Bash", "Double Jump"), player) and cost_all(s, player, options, "UpperWastes.NorthTP", [30], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.HeartBarrier", player), lambda s: cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [], [[32, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.FallenPillar_to_WindtornRuins.HeartBarrier", player), lambda s: cost_all(s, player, options, "WindtornRuins.FallenPillar", [], [], [[100.0, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("WindtornRuins.Escape_to_WindtornRuins.Seir", player), lambda s: s.has_all(("Burrow", "Flash"), player) and s.has("WindtornRuins.HeartBarrier", player), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [40], [['Bow', 1], ['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WeepingRidge.Ore", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash", "Glide"), player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.LaunchArea_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("WeepingRidge.ElevatorFightCompleted", player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.LaunchArea", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.PortalEX", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [40], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Double Jump", player) and s.has_any(("Bash", "Sword"), player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has("Double Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Sentry', 3]], [], [[2, 40]], 5), "or")
    add_rule(world.get_entrance("WeepingRidge.AboveTree_to_WeepingRidge.SpikeClimbEX", player), lambda s: s.has_all(("Double Jump", "Dash"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WeepingRidge.AboveTree", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleWheelsHeart", player), lambda s: s.has("Launch", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [], [[60, 'Shuriken']], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.EntryEX", player), lambda s: s.has("Dash", player) and s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeartMidPoint", player), lambda s: s.has_all(("Glide", "Double Jump", "Grapple"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Dash"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.Entry_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("WillowsEnd.GrappleWheelsHeart", player) and cost_all(s, player, options, "WillowsEnd.Entry", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has("Double Jump", player) and s.has("HammerJump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.GrappleHeart", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.GrappleHeartMidPoint_to_WillowsEnd.Entry", player), lambda s: s.has_all(("Double Jump", "Grenade"), player), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("Grapple", "Double Jump"), player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Grapple", "Double Jump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has("Double Jump", player) and s.has_any(("Triple Jump", "Dash"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Sentry', 2]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.BoulderHeartPath_to_WillowsEnd.SpikesOre", player), lambda s: s.has_all(("['Hammer', 'Sentry']", "Double Jump", "Glide"), player) and cost_all(s, player, options, "WillowsEnd.BoulderHeartPath", [], [['Sentry', 3]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.InnerTP_to_WillowsEnd.AboveInnerTP", player), lambda s: s.has("['Sword', 'Sentry']", player) and cost_all(s, player, options, "WillowsEnd.InnerTP", [40], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.East_to_WillowsEnd.Upper", player), lambda s: s.has_all(("['Sword', 'Sentry']", "Double Jump"), player) and s.has("Triple Jump", player) and cost_all(s, player, options, "WillowsEnd.East", [20], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.RedirectHeartPath_to_WillowsEnd.East", player), lambda s: True, "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.West", player), lambda s: s.has("SwordJump", player) and s.has("Triple Jump", player), "or")
    add_rule(world.get_entrance("WillowsEnd.Upper_to_WillowsEnd.UpperHeartPath", player), lambda s: cost_all(s, player, options, "WillowsEnd.Upper", [], [['Sentry', 1]], [], [], 5), "or")
    add_rule(world.get_entrance("WillowsEnd.West_to_WillowsEnd.Upper", player), lambda s: cost_all(s, player, options, "WillowsEnd.West", [], [['Sentry', 2]], [], [], 5), "or")
